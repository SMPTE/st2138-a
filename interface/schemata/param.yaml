#
# Copyright (c) by the Society of Motion Picture and Television Engineers
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

$id: https://raw.githubusercontent.com/SMPTE/st2138-a/main/interface/schemata/param.yaml
$schema: https://json-schema.org/draft/2020-12/schema
title: Schema for Catena's Param object
description: |
  Defines the parameter's type, constraints on its value, UI hints, access control
  and other properties.
type: object
properties:
  name: 
    $ref: "#/$defs/polyglot_text"
  type:
    $ref: "#/$defs/param_type"
  value:
    $ref: "#/$defs/value"
  constraint:
    oneOf:
      - $ref: "#/$defs/constraint_ref"
      - $ref: "#/$defs/constraint"


# to allow for the schema to be extended, replace additionalProperties with unevaluatedProperties.
# note that this requires a validator that supports the 2022-12 draft of the spec.
# AJV does have support, but Cursor / vscode's intellisense syntax highlighting does not.
# The tools/validate.js script works with the 2022-12 draft of the spec.
# unevaluatedProperties: false
additionalProperties: false

# specialize the value schema for each param_type
allOf:
 - $ref: "#/$defs/apply_int32"


$defs:
  polyglot_text:
    title: Polyglot Text
    description: Text that a client can display in one of multiple languages
    type: object
    properties:
      display_strings:
        type: object
        anyOf:
          - $ref: "#/$defs/language_code"
          - $ref: "#/$defs/language_pack_reference"
        minProperties: 1
    additionalProperties: false

  language_code:
    title: Language Codes Table
    description: |
      A table of standard language identifying codes.
    $comment: |
      There may be a published reference we can use instead of inlining this here.
      Note that this is not (yet) a complete list of all possible language codes.
      For readability and maintenance considerations, the codes are grouped by 
      major language.
    type: object
    patternProperties:
      ^(en|en-AU|en-CA|en-HK|en-IE|en-MY)$:
        title: English Language group
        type: string
      ^(es|es-ES|es-AR|es-BO|es-CL|es-CO)$:
        title: Spanish Language group
        type: string
      ^(fr|fr-FR|fr-BE|fr-CA|fr-CH)$:
        title: French Language group
        type: string
      ^(de|de-DE|de-AT|de-CH)$:
        title: German Language group
        type: string
    additionalProperties: false

  language_pack_reference:
    title: Language Pack Reference
    description: |
      A reference to a language pack.
    type: object
    properties:
      $key:
        type: string
        description: The ID of the language pack.
    required:
      - $key
    additionalProperties: false

  param_type:
    title: Parameter's data type
    description: The parameter's data type
    type: string
    enum: [UNDEFINED, EMPTY, INT32, FLOAT32, STRING, STRUCT, STRUCT_VARIANT, INT32_ARRAY, FLOAT32_ARRAY, STRING_ARRAY, BINARY, STRUCT_ARRAY, STRUCT_VARIANT_ARRAY, DATA]
    default: UNDEFINED

# parameter values are polymorphic dependent on type
# there are a collection of apply_value_to_param_type schemas that specialize the value schema
# for each param_type.
# the value schema is the union of all of these specialized schemas.
  value:
    title: Parameter Value
    description: "Value of the parameter. Its schema is polymorphic dependent on type."

  constraint:
    title: Constraint to define the parameter's allowed values
    description: Polymorphic depending on the type of constraint applied
    type: object
    properties:
      type:
        title: Constraint Type
        description: The type of constraint applied
        type: string
        enum: [UNDEFINED, INT_CHOICE, INT_RANGE, ALARM_TABLE, FLOAT_RANGE, STRING_CHOICE, STRING_STRING_CHOICE, ALARM_TABLE]
        default: UNDEFINED
    required:
      - type
    oneOf:
      - $ref: "#/$defs/int32_constraint"

  constraint_ref:
    title: Constraint Reference
    description: A reference to a constraint that is shared by multiple parameters.
    type: object
    properties: 
      ref_oid:
        type: string
        description: The ID of the constraint.
        pattern: ^[a-zA-Z]\w{0,30}$
    required:
      - ref_oid
    additionalProperties: false

      

  apply_int32:
    title: INT32 specialism
    description: Applies INT32 values & constraints, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: INT32
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/int32_value"
        constraint:
          oneOf:
            - $ref: "#/$defs/int32_constraint"
            - $ref: "#/$defs/constraint_ref"


  int32_value:
    title: INT32 Value
    description: Defines INT32 as a primitive number type
    type: object
    properties:
      int32_value:
        $ref: "#/$defs/int32"
    required:
      - int32_value
    additionalProperties: false
    
  int32: 
    title: INT32
    description: Defines INT32 as a primitive number type
    type: integer
    minimum: -2147483648
    maximum: 2147483647

  int32_constraint:
    title: INT32 Constraint
    description: Polymorphic depending on the type of constraint applied
    type: object
    allOf:
      - if: # INT_CHOICE
          type: object
          properties:
            type:
              const: INT_CHOICE
        then:
          type: object
          properties:
            type:
              const: INT_CHOICE
            int32_choice:
              type: object
              properties:
                choices:
                  type: array
                  items:
                    $ref: "#/$defs/int32_choice"
              required:
                - choices
              additionalProperties: false
          additionalProperties: false
      - if: # INT_RANGE
          type: object
          properties:
            type:
              const: INT_RANGE
        then:
          type: object
          properties:
            type:
              const: INT_RANGE
            int32_range:
              type: object
              properties:
                min_value:
                  $ref: "#/$defs/int32"
                max_value:
                  $ref: "#/$defs/int32"
                step:
                  $ref: "#/$defs/int32"
                display_min_value:
                  $ref: "#/$defs/int32"
                display_max_value:
                  $ref: "#/$defs/int32"
              required:
                - min_value
                - max_value
              additionalProperties: false
          additionalProperties: false
      - if: # ALARM_TABLE
          type: object
          properties:
            type:
              const: ALARM_TABLE
        then:
          type: object
          properties:
            type:
              const: ALARM_TABLE
            alarm_table:
              type: object
              properties:
                alarms:
                  type: array
                  items:
                    $ref: "#/$defs/alarm"
                  maxItems: 32
              required:
                - alarms
              additionalProperties: false
          additionalProperties: false

  alarm: 
    title: Alarm
    description: | 
      Defines an alarm in terms of its severity and a description of the problem causing it.
      Alarms occupy one bit in the alarm table allowing up to 32 different alarms to be reported.
    type: object
    properties:
      bit_value:
        type: integer
        minimum: 0
        maximum: 31
      severity:
        type: string
        enum: [INFO, WARNING, SEVERE, UNKNOWN]
      description:
        $ref: "#/$defs/polyglot_text"
    required: [bit_value, severity, description]
    additionalProperties: false

  int32_choice:
    title: INT_CHOICE Constraint
    description: Maps strings intended for use in pick-lists to integer values
    type: object
    properties:
      value:
        $ref: "#/$defs/int32"
      name:
        $ref: "#/$defs/polyglot_text"
    required:
      - value
      - name
    additionalProperties: false
      
