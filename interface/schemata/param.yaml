#
# Copyright (c) by the Society of Motion Picture and Television Engineers
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

$id: https://raw.githubusercontent.com/SMPTE/st2138-a/main/interface/schemata/param.yaml
$schema: https://json-schema.org/draft/2020-12/schema
title: Schema for Catena's Param object
description: |
  Defines the parameter's type, constraints on its value, UI hints, access control
  and other properties.
type: object
properties:
  name: 
    $ref: "#/$defs/polyglot_text"
  type:
    $ref: "#/$defs/param_type"
  value:
    $ref: "#/$defs/value"
  constraint:
    oneOf:
      - $ref: "#/$defs/constraint_ref"
      - $ref: "#/$defs/constraint"
  params:
    $ref: "#/$defs/param_map"
  commands:
    $ref: "#/$defs/param_map"
  template_oid:
    $ref: "#/$defs/template_oid"

# to allow for the schema to be extended, replace additionalProperties with unevaluatedProperties.
# note that this requires a validator that supports the 2022-12 draft of the spec.
# AJV does have support, but Cursor / vscode's intellisense syntax highlighting does not.
# The tools/validate.js script works with the 2022-12 draft of the spec.
# unevaluatedProperties: false
additionalProperties: false

# specialize the value schema for each param_type
allOf:
 - $ref: "#/$defs/apply_int32"
 - $ref: "#/$defs/apply_float32"
 - $ref: "#/$defs/apply_string"
 - $ref: "#/$defs/apply_struct"
 - $ref: "#/$defs/apply_struct_variant"

$defs:
  param_map:
    title: Parameters Map
    description: |
      A map of simple_oids to parameter descriptors.
      The keys are the names of the parameters.
    type: object
    patternProperties:
      ^[a-zA-Z]\w{0,30}$:
        # the regex on the line above shoul be identical to the one in #$defs/simple_oid
        $ref: "#"
    minProperties: 1
    additionalProperties: false

  polyglot_text:
    title: Polyglot Text
    description: Text that a client can display in one of multiple languages
    type: object
    properties:
      display_strings:
        type: object
        anyOf:
          - $ref: "#/$defs/language_code"
          - $ref: "#/$defs/language_pack_reference"
        minProperties: 1
    additionalProperties: false

  language_code:
    title: Language Codes Table
    description: |
      A table of standard language identifying codes.
    $comment: |
      There may be a published reference we can use instead of inlining this here.
      Note that this is not (yet) a complete list of all possible language codes.
      For readability and maintenance considerations, the codes are grouped by 
      major language.
    type: object
    patternProperties:
      ^(en|en-AU|en-CA|en-HK|en-IE|en-MY)$:
        title: English Language group
        type: string
      ^(es|es-ES|es-AR|es-BO|es-CL|es-CO)$:
        title: Spanish Language group
        type: string
      ^(fr|fr-FR|fr-BE|fr-CA|fr-CH)$:
        title: French Language group
        type: string
      ^(de|de-DE|de-AT|de-CH)$:
        title: German Language group
        type: string
    additionalProperties: false

  language_pack_reference:
    title: Language Pack Reference
    description: |
      A reference to a language pack.
    type: object
    properties:
      $key:
        type: string
        description: The ID of the language pack.
    required:
      - $key
    additionalProperties: false

  param_type:
    title: Parameter's data type
    description: The parameter's data type
    type: string
    enum: [UNDEFINED, EMPTY, INT32, FLOAT32, STRING, STRUCT, STRUCT_VARIANT, INT32_ARRAY, FLOAT32_ARRAY, STRING_ARRAY, BINARY, STRUCT_ARRAY, STRUCT_VARIANT_ARRAY, DATA]
    default: UNDEFINED

  value:
    # parameter values are polymorphic dependent on type
    # there are a collection of apply_value_to_param_type schemas that specialize the value schema
    # for each param_type.
    # the value schema is the union of all of these specialized schemas.
    title: Parameter Value
    description: "Value of the parameter. Its schema is polymorphic dependent on type."

  constraint:
    title: Constraint to define the parameter's allowed values
    description: Polymorphic depending on the type of constraint applied
    type: object
    properties:
      type:
        title: Constraint Type
        description: The type of constraint applied
        type: string
        enum: [UNDEFINED, INT_CHOICE, INT_RANGE, ALARM_TABLE, FLOAT_RANGE, STRING_CHOICE, STRING_STRING_CHOICE, ALARM_TABLE]
        default: UNDEFINED
    required:
      - type
    oneOf:
      - $ref: "#/$defs/int32_constraint"

  simple_oid:
    title: Simple OID
    description: |
      A simple OID is used as a key in a map of string keys to values.
      Because it is also potentially used by code generators, its length and
      character set are restricted.
    type: string
    pattern: ^[a-zA-Z]\w{0,30}$
    default: ""

  template_oid:
    title: Template OID
    description: The fully qualified OID of the template that this parameter is based on.
    type: string
    format: json-pointer
    default: ""

  constraint_ref:
    title: Constraint Reference
    description: A reference to a constraint that is shared by multiple parameters.
    type: object
    properties: 
      ref_oid:
        $ref: "#/$defs/simple_oid"
    required:
      - ref_oid
    additionalProperties: false

  apply_int32:
    title: INT32 specialism
    description: Applies INT32 values & constraints, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: INT32
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/int32_value"
        constraint:
          oneOf:
            - $ref: "#/$defs/int32_constraint"
            - $ref: "#/$defs/constraint_ref"

  int32_value:
    title: INT32 Value
    description: Defines INT32 as a primitive number type
    type: object
    properties:
      int32_value:
        $ref: "#/$defs/int32"
    required:
      - int32_value
    additionalProperties: false
    
  int32: 
    title: INT32
    description: Defines INT32 as a primitive number type
    type: integer
    minimum: -2147483648
    maximum: 2147483647

  int32_constraint:
    title: INT32 Constraint
    description: Polymorphic depending on the type of constraint applied
    type: object
    allOf:
      - if: # INT_CHOICE
          type: object
          properties:
            type:
              const: INT_CHOICE
        then:
          type: object
          properties:
            type:
              const: INT_CHOICE
            int32_choice:
              type: object
              properties:
                choices:
                  type: array
                  items:
                    $ref: "#/$defs/int32_choice"
              required:
                - choices
              additionalProperties: false
          additionalProperties: false
      - if: # INT_RANGE
          type: object
          properties:
            type:
              const: INT_RANGE
        then:
          type: object
          properties:
            type:
              const: INT_RANGE
            int32_range:
              type: object
              properties:
                min_value:
                  $ref: "#/$defs/int32"
                max_value:
                  $ref: "#/$defs/int32"
                step:
                  $ref: "#/$defs/int32"
                display_min_value:
                  $ref: "#/$defs/int32"
                display_max_value:
                  $ref: "#/$defs/int32"
              required:
                - min_value
                - max_value
              additionalProperties: false
          additionalProperties: false
      - if: # ALARM_TABLE
          type: object
          properties:
            type:
              const: ALARM_TABLE
        then:
          type: object
          properties:
            type:
              const: ALARM_TABLE
            alarm_table:
              type: object
              properties:
                alarms:
                  type: array
                  items:
                    $ref: "#/$defs/alarm"
                  maxItems: 32
              required:
                - alarms
              additionalProperties: false
          additionalProperties: false

  alarm: 
    title: Alarm
    description: | 
      Defines an alarm in terms of its severity and a description of the problem causing it.
      Alarms occupy one bit in the alarm table allowing up to 32 different alarms to be reported.
    type: object
    properties:
      bit_value:
        type: integer
        minimum: 0
        maximum: 31
      severity:
        type: string
        enum: [INFO, WARNING, SEVERE, UNKNOWN]
      description:
        $ref: "#/$defs/polyglot_text"
    required: [bit_value, severity, description]
    additionalProperties: false

  int32_choice:
    title: INT_CHOICE Constraint
    description: Maps strings intended for use in pick-lists to integer values
    type: object
    properties:
      value:
        $ref: "#/$defs/int32"
      name:
        $ref: "#/$defs/polyglot_text"
    required:
      - value
      - name
    additionalProperties: false
      
  apply_float32:
    title: FLOAT specialism
    description: Applies FLOAT32 values & constraints, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: FLOAT32
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/float32_value"
        constraint:
          oneOf:
            - $ref: "#/$defs/float32_constraint"
            - $ref: "#/$defs/constraint_ref"

  float32_value:
    title: FLOAT32 Value
    description: Defines FLOAT32 as a primitive number type
    type: object
    properties:
      float32_value:
        $ref: "#/$defs/float32"
    required:
      - float32_value
    additionalProperties: false
  
  float32:
    title: FLOAT32
    description: Defines FLOAT32 as a primitive number type
    type: number
    minimum: -3.4028234663852886e+38
    maximum: 3.4028234663852886e+38
    default: 0.0

  float32_constraint:
    title: FLOAT32 Constraint
    description: |
      There is currently only one constraint type for FLOAT32, FLOAT_RANGE.
      The intent of this schema is to allow for future expansion of constraint types.
    type: object
    allOf:
      - if: # FLOAT_RANGE
          type: object
          properties:
            type:
              const: FLOAT_RANGE
        then:
          type: object
          properties:
            type:
              const: FLOAT_RANGE
            float32_range:
              type: object
              properties:
                min_value:
                  $ref: "#/$defs/float32"
                max_value:
                  $ref: "#/$defs/float32"
                step:
                  $ref: "#/$defs/float32"
                display_min_value:
                  $ref: "#/$defs/float32"
                display_max_value:
                  $ref: "#/$defs/float32"
              required:
                - min_value
                - max_value
              additionalProperties: false
          additionalProperties: false

  apply_string:
    title: STRING specialism
    description: Applies STRING values & constraints, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: STRING
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/string_value"
        constraint:
          oneOf:
            - $ref: "#/$defs/string_constraint"
            - $ref: "#/$defs/constraint_ref"

  string_value:
    title: STRING Value
    description: Defines STRING as a primitive string type
    type: object
    properties:
      string_value:
        type: string
    required:
      - string_value
    additionalProperties: false

  string_constraint:
    title: STRING Constraint
    description: Provides two ways of constraining a string value to a set of choices
    type: object
    allOf:
      - if: # STRING_CHOICE
          type: object
          properties:
            type:
              const: STRING_CHOICE
        then:
          type: object
          properties:
            type:
              const: STRING_CHOICE
            string_choice:
              $ref: "#/$defs/string_choice"
          required:
            - string_choice
          additionalProperties: false
          
      - if: # STRING_STRING_CHOICE
          type: object
          properties:
            type:
              const: STRING_STRING_CHOICE
        then:
          type: object
          properties:
            type:
              const: STRING_STRING_CHOICE
            string_string_choice:
              $ref: "#/$defs/string_string_choice"
          additionalProperties: false

  string_choice:
    title: STRING_CHOICE Constraint
    description: | 
      Maps strings intended for use in pick-lists to string values.
      Not multi-lingual.
      Has a flag, strict, that if true, will only allow values that are in the choices array.
      If false, will allow any string value.
    type: object
    properties:
      choices:
        type: array
        items:
          type: string
      strict:
        type: boolean
        default: false
    required:
      - choices
    additionalProperties: false

  string_string_choice:
    title: STRING_STRING_CHOICE Constraint
    description: | 
      Maps strings intended for use in pick-lists to string values.
      Has a flag, strict, that if true, will only allow values that are in the choices array.
      If false, will allow any string value.
      Has multi-language support.
    type: object
    properties:
      choices:
        type: array
        items:
          type: object
          properties:
            value:
              type: string  
            name:
              $ref: "#/$defs/polyglot_text"
          required:
            - name
            - value
          additionalProperties: false
      strict:
        type: boolean
        default: false
    required:
      - choices
    additionalProperties: false

  apply_struct:
    title: STRUCT specialism
    description: Applies STRUCT values & constraints, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: STRUCT
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/struct_value"
        
        # structs have no constraints, their children may
        constraint: false

  struct_value:
    title: STRUCT Value
    description: Defines STRUCT as a map of string keys to values
    type: object
    properties:
      struct_value:
        type: object
        properties:
          fields:
            $ref: "#/$defs/struct_fields"
        required:
          - fields
        additionalProperties: false
    required:
      - struct_value
    additionalProperties: false

  struct_fields:
    title: STRUCT Fields
    description: Defines a map of string keys to values
    type: object
    patternProperties:
      ^[a-zA-Z]\w{0,30}$:
        # the regex on the line above shoul be identical to the one in #$defs/simple_oid
        $ref: "#/$defs/value"
    minProperties: 1
    additionalProperties: false

  apply_struct_variant:
    title: STRUCT_VARIANT specialism
    description: Applies STRUCT_VARIANT values, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: STRUCT_VARIANT
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/struct_variant_value"
        constraint: false

  struct_variant_value:
    title: STRUCT_VARIANT Value
    description: | 
      Says which variant of the struct is being used and the value of that variant.
    type: object
    properties:
      struct_variant_value:
        type: object
        properties:
          struct_variant_type:
            $ref: "#/$defs/simple_oid"
          value:
            $ref: "#/$defs/value"
        required:
          - struct_variant_type
          - value
        additionalProperties: false
    additionalProperties: false
    