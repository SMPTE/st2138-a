#
# Copyright (c) by the Society of Motion Picture and Television Engineers
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

$id: https://smpte.github.io/st2138-a/interface/schemata/device.yaml
$schema: https://json-schema.org/draft/2020-12/schema
title: Schema for Catena's Device Model
description: |
  Intended to assist humans to author Catena device models as JSON files as
  some IDEs can use schemata such as this one to lint models.
  
type: object
properties:
  params:
    $ref: "#/$defs/param_map"
  commands:
    $ref: "#/$defs/param_map"
  access_scopes:
    $ref: "#/$defs/access_scopes"
  default_scope:
    $ref: "#/$defs/default_scope"
  slot:
    $ref: "#/$defs/slot"
  detail_level:
    $ref: "#/$defs/detail_level"
  multi_set_enabled:
    $ref: "#/$defs/multi_set_enabled"
  subscriptions:
    $ref: "#/$defs/subscriptions"
  constraints:
    $ref: "#/$defs/constraint_map"
  language_packs:
    $ref: "#/$defs/language_packs"
  menu_groups:
    $ref: "#/$defs/menu_groups"
additionalProperties: false

$defs:
  access_scopes:
    title: Access Scopes
    description: |
      The access scopes recognized by this the device.
    type: array
    items:
      $ref: "#/$defs/access_scope"
  
  default_scope:
    title: Default Scope
    description: |
      The default scope for the device.
      Objects in the model will have this access scope unless overridden
      explicitly, or implicitly by inheritance
    type: string
    default: ""

  slot:
    title: Slot
    description: |
      The slot number of the device. Must be unique within the connection.
    type: integer
    default: 0
    minimum: 0
    maximum: 65535

  slot_list:
    title: Slot List
    description: |
      The list of slots occupied by device models within the connection.
    type: object
    properties:
      slots:
        type: array
        items:
          $ref: "#/$defs/slot"
        uniqueItems: true
    additionalProperties: false

  detail_level:
    title: Detail Level
    description: |
      The level of detail in device messages and parameter updates.
      'full' indicates that all parameters are reported, 
      'minimal' that only the minimal set is, 
      'subscriptions' reports the minimal set plus identified subscribed
      parameters, 
      'commands' reports only descriptors for commands and not for parameters,
      and 'none' indicates that no parameters or commands should be
      automatically reported by the device (parameter descriptors, command
      descriptors, and values can still be pulled).

      This is another place where human readability/writeability is important.
      Protobuf uses a numeric value for the detail level so we use a oneOf
      to enable both numeric and string values.
    oneOf:
      - type: string
        enum:
          - FULL
          - MINIMAL
          - SUBSCRIPTIONS
          - COMMANDS
          - NONE
          - UNSET
        default: FULL
      - type: integer
        enum: [0, 1, 2, 3, 4, 5]
        default: 0
        examples: [0, 1, 2, 3, 4, 5]
        oneOf:
          - const: 0
            title: FULL
          - const: 1
            title: MINIMAL
          - const: 2
            title: SUBSCRIPTIONS
          - const: 3
            title: COMMANDS
          - const: 4
            title: NONE
          - const: 5
            title: UNSET

  multi_set_enabled:
    title: Multi Set Enabled Flag
    description: |
      If true, the device supports multi-set operations. These are idempotent
      operations that can be used to set multiple parameters in a single
      operation.
    type: boolean
    default: false

  subscriptions:
    title: Subscriptions
    description: |
      When true, indicates that the device supports subscription-based 
      access to subsets of parameters.
    type: boolean
    default: false

  constraint_map:
    title: Constraint Map
    description: |
      A map of top-level shared constraints
    type: object
    patternProperties:
      ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
        $ref: "#/$defs/constraint"
    additionalProperties: false

  language_packs:
    title: Language Packs
    description: |
      Language Packs A map of language identifiers to resource dictionaries
      or language packs for each language supported. The keys are 
      from the ISO 639-1 language code, e.g. 
      \"es\" for Global Spanish.
      \"es-CO\" for Colombian Spanish.
      \"pl\" for Jezyk polski"
    type: object
    properties:
      packs:
        type: object
        additionalProperties:
          $ref: "#/$defs/language_pack"

  language_pack:
    title: Language Pack
    description: |
      Language Pack A map of string identifiers, e.g. \"greeting\" to strings
      which are all in the same language.
    type: object
    properties:
      name:
        type: string
        description: |
          The name of the language pack.
      words:
        type: object
        description: |
          A map of string identifiers to strings.
        additionalProperties:
          type: string

  menu_groups:
    title: Menu Groups
    description: |
      A map of menu groups.
    type: object
    patternProperties:
      ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
        $ref: "#/$defs/menu_group"
  
  menu_group:
    title: Menu Group
    description: |
      A operationally logical grouping of menus.
    type: object
    properties:
      name:
        $ref: "#/$defs/polyglot_text"
      menus:
        $ref: "#/$defs/menus"
      order:
        type: integer
        default: 0
        description: |
          The display order of the menu group.
    required:
      - name
      - menus
      - order
    additionalProperties: false

  menus:
    title: Menus
    description: |
      A map of menus.
    type: object
    patternProperties:
      ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
        $ref: "#/$defs/menu"
    additionalProperties: false

  menu:
    title: Menu
    description: |
      A logical grouping of parameters or commands (or both)
    type: object
    properties:
      name:
        $ref: "#/$defs/polyglot_text"
      param_oids:
        $ref: "#/$defs/oid_list"
      command_oids:
        $ref: "#/$defs/oid_list"
      client_hints:
        $ref: "#/$defs/client_hints"
      hidden:
        title: Hidden
        description: |
          Whether the menu should be hidden in the client GUI.
        type: boolean
        default: false
      disabled:
        title: Disabled
        description: |
          Whether the menu should be disabled (shown as read-only) in the client GUI.
        type: boolean
        default: false
      order:
        type: integer
        default: 0
        description: |
          The display order of the menu.
    additionalProperties: false
    
  oid_list:
    title: OID List
    description: |
      A list of fully qualified OIDs.
    type: array
    items:
      type: string
      format: json-pointer

  param:    
      title: Schema for Catena's Param object
      description: |
        Defines the parameter's type, constraints on its value, UI hints, access control
        and other properties.
      type: object
      properties:
        name: 
          $ref: "#/$defs/polyglot_text"
        type:
          $ref: "#/$defs/param_type"
        value:
          $ref: "#/$defs/value"
        constraint:
          oneOf:
            - $ref: "#/$defs/constraint_ref"
            - $ref: "#/$defs/constraint"
        params:
          $ref: "#/$defs/param_map"
        commands:
          $ref: "#/$defs/param_map"
        template_oid:
          $ref: "#/$defs/template_oid"
        read_only:
          $ref: "#/$defs/read_only"
        precision: # only valid for FLOAT32 and FLOAT32_ARRAY, removed from other specializations
          $ref: "#/$defs/precision"
        max_length: # only valid for STRING and STRING_ARRAY, removed from other specializations
          $ref: "#/$defs/max_length"
        total_length: # only valid for STRING_ARRAY, removed from other specializations
          $ref: "#/$defs/total_length"
        widget:
          $ref: "#/$defs/widget"
        access_scope:
          $ref: "#/$defs/access_scope"
        client_hints:
          $ref: "#/$defs/client_hints"
        response:
          $ref: "#/$defs/response"
        minimal_set:
          $ref: "#/$defs/minimal_set"
        help:
          $ref: "#/$defs/polyglot_text"
        import:
          $ref: "#/$defs/import"
        oid_aliases:
          $ref: "#/$defs/oid_aliases"
        stateless:
          $ref: "#/$defs/stateless"

      # to allow for the schema to be extended, replace additionalProperties with unevaluatedProperties.
      # note that this requires a validator that supports the 2022-12 draft of the spec.
      # AJV does have support, but Cursor / vscode's intellisense syntax highlighting does not.
      # The tools/validate.js script works with the 2022-12 draft of the spec.
      # unevaluatedProperties: false
      additionalProperties: false

      # specialize the value schema for each param_type
      allOf:
      - $ref: "#/$defs/apply_int32"
      - $ref: "#/$defs/apply_float32"
      - $ref: "#/$defs/apply_string"
      - $ref: "#/$defs/apply_struct"
      - $ref: "#/$defs/apply_struct_variant"
      - $ref: "#/$defs/apply_int32_array"
      - $ref: "#/$defs/apply_float32_array"
      - $ref: "#/$defs/apply_string_array"
      - $ref: "#/$defs/apply_struct_array"
      - $ref: "#/$defs/apply_struct_variant_array"
      - $ref: "#/$defs/apply_data"
  
  param_map:
    title: Parameters Map
    description: |
      A map of simple_oids to parameter descriptors.
      The keys are the names of the parameters.
    type: object
    patternProperties:
      ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
        # the regex on the line above should be identical to the one in #$defs/simple_oid
        $ref: "#/$defs/param"
    minProperties: 1
    additionalProperties: false

  polyglot_text:
    title: Polyglot Text
    description: Text that a client can display in one of multiple languages
    type: object
    properties:
      display_strings:
        type: object
        anyOf:
          - $ref: "#/$defs/language_map"
          - $ref: "#/$defs/language_pack_reference"
        minProperties: 1
    additionalProperties: false

  language_code:
    title: ISO 639-1 Language Code (well, almost)
    description: |
      A (likely) valid ISO 639-1 language code.
    $comment: |
      There may be a published reference we can use instead of inlining this here.
      The regex forces the language code to be in the format of a ISO 639-1
      language code, but it will also allow invalid codes such as "zz-ZZ" to
      be used.
    type: string
    pattern: ^[a-z]{2}(-[A-Z]{2})?$
    default: ""

  language_map:
    title: Language Map
    description: |
      A map of language codes to language packs.
    type: object
    patternProperties:
      ^[a-z]{2}(-[A-Z]{2})?$:
        type: string
    additionalProperties: false

  language_pack_reference:
    title: Language Pack Reference
    description: |
      A reference to a language pack.
    type: object
    properties:
      $key:
        type: string
        description: The ID of the language pack.
    required:
      - $key
    additionalProperties: false

  param_type:
    title: Parameter's data type
    description: |
      The parameter's data type.
      Note that the protobuf definition is an enumerated integer,
      but using strings is more convenient for humans. So we support
      both via the oneOf composition.
    oneOf:
      - type: integer
        enum: [0, 1, 4, 6, 7, 10, 11, 14, 16, 17, 18, 32, 33, 50]
        default: 0
        examples: [0, 1, 4, 6, 7, 10, 11, 14, 16, 17, 18, 32, 33, 50]
        oneOf:
          - const: 0
            title: UNDEFINED
          - const: 1
            title: EMPTY
          - const: 4
            title: INT32
          - const: 6
            title: FLOAT32
          - const: 7
            title: STRING
          - const: 10
            title: STRUCT
          - const: 11
            title: STRUCT_VARIANT
          - const: 14
            title: INT32_ARRAY
          - const: 16
            title: FLOAT32_ARRAY
          - const: 17
            title: STRING_ARRAY
          - const: 18
            title: BINARY
          - const: 32
            title: STRUCT_ARRAY
          - const: 33
            title: STRUCT_VARIANT_ARRAY
          - const: 50
            title: DATA
      - type: string
        enum: [UNDEFINED, EMPTY, INT32, FLOAT32, STRING, STRUCT, STRUCT_VARIANT, INT32_ARRAY, FLOAT32_ARRAY, STRING_ARRAY, BINARY, STRUCT_ARRAY, STRUCT_VARIANT_ARRAY, DATA]
        default: UNDEFINED
 
  value:
    # parameter values are polymorphic dependent on type
    # there are a collection of apply_value_to_param_type schemas that specialize the value schema
    # for each param_type.
    # the value schema is the union of all of these specialized schemas.
    title: Parameter Value
    description: "Value of the parameter. Its schema is polymorphic dependent on type."

  constraint:
    title: Constraint to define the parameter's allowed values
    description: Polymorphic depending on the type of constraint applied
    type: object
    properties:
      type:
        title: Constraint Type
        description: |
          The type of constraint applied
          This is another place where human readability/writeability is important.
          Protobuf uses a numeric value for the constraint type so we use a oneOf
          to enable both numeric and string values.
        oneOf:
          - type: string
            enum: [UNDEFINED, INT_CHOICE, INT_RANGE, ALARM_TABLE, FLOAT_RANGE, STRING_CHOICE, STRING_STRING_CHOICE]
            default: UNDEFINED
          - type: integer
            enum: [0, 2, 4, 5, 6, 7, 8]
            default: 0
            examples: [0, 2, 4, 5, 6, 7, 8]
            oneOf:
              - const: 0
                title: UNDEFINED
              - const: 2
                title: INT_CHOICE
              - const: 4
                title: INT_RANGE
              - const: 5
                title: ALARM_TABLE
              - const: 6
                title: FLOAT_RANGE
              - const: 7
                title: STRING_CHOICE
              - const: 8
                title: STRING_STRING_CHOICE
    required:
      - type
    oneOf:
      - $ref: "#/$defs/int32_constraint"

  simple_oid:
    title: Simple OID
    description: |
      A simple OID is used as a key in a map of string keys to values.
      Because it is also potentially used by code generators, its length and
      character set are restricted.
    type: string
    pattern: ^[a-zA-Z]\w{0,30}$
    default: ""
  
  fqoid:
    title: Fully Qualified OID
    description: |
      A fully qualified OID is used as a key in a map of string keys to values.
      It is a simple OID with a leading slash. It's a "headless" json-pointer
      with simple OIDs as the segments.
    type: string
    pattern: ^([a-zA-Z]\w{0,30})(/([a-zA-Z]\w{0,30})){0,30}$
    default: ""

  template_oid:
    title: Template OID
    description: The fully qualified OID of the template that this parameter is based on.
    type: string
    format: json-pointer
    default: ""

  constraint_ref:
    title: Constraint Reference
    description: A reference to a constraint that is shared by multiple parameters.
    type: object
    properties: 
      ref_oid:
        $ref: "#/$defs/simple_oid"
    required:
      - ref_oid
    additionalProperties: false

  apply_int32:
    title: INT32 specialism
    description: Applies INT32 values & constraints, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: INT32
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/int32_value"
        constraint:
          oneOf:
            - $ref: "#/$defs/int32_constraint"
            - $ref: "#/$defs/constraint_ref"
        precision: false
        max_length: false
        total_length: false

  int32_value:
    title: INT32 Value
    description: Defines INT32 as a primitive number type
    type: object
    properties:
      int32_value:
        $ref: "#/$defs/int32"
    required:
      - int32_value
    additionalProperties: false
    
  int32: 
    title: INT32
    description: Defines INT32 as a primitive number type
    type: integer
    minimum: -2147483648
    maximum: 2147483647

  int32_constraint:
    title: INT32 Constraint
    description: Polymorphic depending on the type of constraint applied
    type: object
    allOf:
      - if: # INT_CHOICE
          type: object
          properties:
            type:
              const: INT_CHOICE
        then:
          type: object
          properties:
            type:
              const: INT_CHOICE
            int32_choice:
              type: object
              properties:
                choices:
                  type: array
                  items:
                    $ref: "#/$defs/int32_choice"
              required:
                - choices
              additionalProperties: false
          additionalProperties: false
      - if: # INT_RANGE
          type: object
          properties:
            type:
              const: INT_RANGE
        then:
          type: object
          properties:
            type:
              const: INT_RANGE
            int32_range:
              type: object
              properties:
                min_value:
                  $ref: "#/$defs/int32"
                max_value:
                  $ref: "#/$defs/int32"
                step:
                  $ref: "#/$defs/int32"
                display_min:
                  $ref: "#/$defs/int32"
                display_max:
                  $ref: "#/$defs/int32"
              required:
                - min_value
                - max_value
              additionalProperties: false
          additionalProperties: false
      - if: # ALARM_TABLE
          type: object
          properties:
            type:
              const: ALARM_TABLE
        then:
          type: object
          properties:
            type:
              const: ALARM_TABLE
            alarm_table:
              type: object
              properties:
                alarms:
                  type: array
                  items:
                    $ref: "#/$defs/alarm"
                  maxItems: 32
              required:
                - alarms
              additionalProperties: false
          additionalProperties: false

  alarm: 
    title: Alarm
    description: | 
      Defines an alarm in terms of its severity and a description of the problem causing it.
      Alarms occupy one bit in the alarm table allowing up to 32 different alarms to be reported.
    type: object
    properties:
      bit_value:
        type: integer
        minimum: 0
        maximum: 31
      severity:
        type: string
        enum: [INFO, WARNING, SEVERE, UNKNOWN]
      description:
        $ref: "#/$defs/polyglot_text"
    required: [bit_value, severity, description]
    additionalProperties: false

  int32_choice:
    title: INT_CHOICE Constraint
    description: Maps strings intended for use in pick-lists to integer values
    type: object
    properties:
      value:
        $ref: "#/$defs/int32"
      name:
        $ref: "#/$defs/polyglot_text"
    required:
      - value
      - name
    additionalProperties: false
      
  apply_float32:
    title: FLOAT specialism
    description: Applies FLOAT32 values & constraints, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: FLOAT32
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/float32_value"
        constraint:
          oneOf:
            - $ref: "#/$defs/float32_constraint"
            - $ref: "#/$defs/constraint_ref"
        max_length: false
        total_length: false

  float32_value:
    title: FLOAT32 Value
    description: Defines FLOAT32 as a primitive number type
    type: object
    properties:
      float32_value:
        $ref: "#/$defs/float32"
    required:
      - float32_value
    additionalProperties: false
  
  float32:
    title: FLOAT32
    description: Defines FLOAT32 as a primitive number type
    type: number
    minimum: -3.4028234663852886e+38
    maximum: 3.4028234663852886e+38
    default: 0.0

  float32_constraint:
    title: FLOAT32 Constraint
    description: |
      There is currently only one constraint type for FLOAT32, FLOAT_RANGE.
      The intent of this schema is to allow for future expansion of constraint types.
    type: object
    allOf:
      - if: # FLOAT_RANGE
          type: object
          properties:
            type:
              const: FLOAT_RANGE
        then:
          type: object
          properties:
            type:
              const: FLOAT_RANGE
            float32_range:
              type: object
              properties:
                min_value:
                  $ref: "#/$defs/float32"
                max_value:
                  $ref: "#/$defs/float32"
                step:
                  $ref: "#/$defs/float32"
                display_min:
                  $ref: "#/$defs/float32"
                display_max:
                  $ref: "#/$defs/float32"
              required:
                - min_value
                - max_value
              additionalProperties: false
          additionalProperties: false

  apply_string:
    title: STRING specialism
    description: Applies STRING values & constraints, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: STRING
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/string_value"
        constraint:
          oneOf:
            - $ref: "#/$defs/string_constraint"
            - $ref: "#/$defs/constraint_ref"
        precision: false
        total_length: false

  string_value:
    title: STRING Value
    description: Defines STRING as a primitive string type
    type: object
    properties:
      string_value:
        type: string
    required:
      - string_value
    additionalProperties: false

  string_constraint:
    title: STRING Constraint
    description: Provides two ways of constraining a string value to a set of choices
    type: object
    allOf:
      - if: # STRING_CHOICE
          type: object
          properties:
            type:
              const: STRING_CHOICE
        then:
          type: object
          properties:
            type:
              const: STRING_CHOICE
            string_choice:
              $ref: "#/$defs/string_choice"
          required:
            - string_choice
          additionalProperties: false
          
      - if: # STRING_STRING_CHOICE
          type: object
          properties:
            type:
              const: STRING_STRING_CHOICE
        then:
          type: object
          properties:
            type:
              const: STRING_STRING_CHOICE
            string_string_choice:
              $ref: "#/$defs/string_string_choice"
          additionalProperties: false

  string_choice:
    title: STRING_CHOICE Constraint
    description: | 
      Maps strings intended for use in pick-lists to string values.
      Not multi-lingual.
      Has a flag, strict, that if true, will only allow values that are in the choices array.
      If false, will allow any string value.
    type: object
    properties:
      choices:
        type: array
        items:
          type: string
      strict:
        type: boolean
        default: false
    required:
      - choices
    additionalProperties: false

  string_string_choice:
    title: STRING_STRING_CHOICE Constraint
    description: | 
      Maps strings intended for use in pick-lists to string values.
      Has a flag, strict, that if true, will only allow values that are in the choices array.
      If false, will allow any string value.
      Has multi-language support.
    type: object
    properties:
      choices:
        type: array
        items:
          type: object
          properties:
            value:
              type: string  
            name:
              $ref: "#/$defs/polyglot_text"
          required:
            - name
            - value
          additionalProperties: false
      strict:
        type: boolean
        default: false
    required:
      - choices
    additionalProperties: false

  apply_struct:
    title: STRUCT specialism
    description: Applies STRUCT values & constraints, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: STRUCT
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/struct_value"
        
        # structs have no constraints, their children may
        constraint: false
        precision: false
        max_length: false
        total_length: false

  struct_value:
    title: STRUCT Value
    description: Defines STRUCT as a map of string keys to values
    type: object
    properties:
      struct_value:
        type: object
        properties:
          fields:
            $ref: "#/$defs/struct_fields"
        required:
          - fields
        additionalProperties: false
    required:
      - struct_value
    additionalProperties: false

  struct_fields:
    title: STRUCT Fields
    description: Defines a map of string keys to values
    type: object
    patternProperties:
      ^[a-zA-Z]\w{0,30}$:
        # the regex on the line above shoul be identical to the one in #$defs/simple_oid
        $ref: "#/$defs/value"
    minProperties: 1
    additionalProperties: false

  apply_struct_variant:
    title: STRUCT_VARIANT specialism
    description: Applies STRUCT_VARIANT values, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: STRUCT_VARIANT
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/struct_variant_value"
        constraint: false
        precision: false
        max_length: false
        total_length: false

  struct_variant_value:
    title: STRUCT_VARIANT Value
    description: | 
      Says which variant of the struct is being used and the value of that variant.
    type: object
    properties:
      struct_variant_value:
        type: object
        properties:
          struct_variant_type:
            $ref: "#/$defs/simple_oid"
          value:
            $ref: "#/$defs/value"
        required:
          - struct_variant_type
          - value
        additionalProperties: false
    additionalProperties: false

  apply_int32_array:
    title: INT32_ARRAY specialism
    description: Applies INT32_ARRAY values, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: INT32_ARRAY
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/int32_array_values"
        constraint:
          oneOf:
            - $ref: "#/$defs/int32_constraint"
            - $ref: "#/$defs/constraint_ref"
        precision: false
        max_length: false
        total_length: false

  int32_array_values:
    title: INT32_ARRAY Value
    description: Defines INT32_ARRAY as an array of INT32 values
    type: object
    properties:
      int32_array_values:
        type: object
        properties:
          ints:
            type: array
            items:
              $ref: "#/$defs/int32"
        required:
          - ints
        additionalProperties: false
    required:
      - int32_array_values
    additionalProperties: false

  apply_float32_array:
    title: FLOAT32_ARRAY specialism
    description: Applies FLOAT32_ARRAY values, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: FLOAT32_ARRAY
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/float32_array_values"
        constraint:
          oneOf:
            - $ref: "#/$defs/float32_constraint"
            - $ref: "#/$defs/constraint_ref"
        max_length: false
        total_length: false

  float32_array_values:
    title: FLOAT32_ARRAY Value
    description: Defines FLOAT32_ARRAY as an array of FLOAT32 values
    type: object
    properties:
      float32_array_values:
        type: object
        properties:
          floats:
            type: array
            items:
              $ref: "#/$defs/float32"
        required:
          - floats
        additionalProperties: false
    required:
      - float32_array_values
    additionalProperties: false

  apply_string_array:
    title: STRING_ARRAY specialism
    description: Applies STRING_ARRAY values, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: STRING_ARRAY
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/string_array_values"
        constraint:
          oneOf:
            - $ref: "#/$defs/string_constraint"
            - $ref: "#/$defs/constraint_ref"
        precision: false

  string_array_values:
    title: STRING_ARRAY Value
    description: Defines STRING_ARRAY as an array of STRING values
    type: object
    properties:
      string_array_values:
        type: object
        properties:
          strings:
            type: array
            items:
              type: string
        required:
          - strings
        additionalProperties: false
    required:
      - string_array_values
    additionalProperties: false

  apply_struct_array:
    title: STRUCT_ARRAY specialism
    description: Applies STRUCT_ARRAY values, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: STRUCT_ARRAY
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/struct_array_values"
        constraint: false
        precision: false
        max_length: false
        total_length: false

  struct_array_values:
    title: STRUCT_ARRAY Value
    description: Defines STRUCT_ARRAY as an array of STRUCT values
    type: object
    properties:
      struct_array_values:
        type: object
        properties:
          struct_values:
            type: array
            items:
              $ref: "#/$defs/struct_value"
        required:
          - struct_values
        additionalProperties: false
    required:
      - struct_array_values
    additionalProperties: false

  apply_struct_variant_array:
    title: STRUCT_VARIANT_ARRAY specialism
    description: Applies STRUCT_VARIANT_ARRAY values, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: STRUCT_VARIANT_ARRAY
    then:
      type: object
      properties:
        value:
          type: object
          properties:
            struct_variant_array_values:
              $ref: "#/$defs/struct_variant_array_values"
          required:
            - struct_variant_array_values
          additionalProperties: false
        constraint: false
        precision: false
        max_length: false
        total_length: false

  struct_variant_array_values:
    title: STRUCT_VARIANT_ARRAY Value
    description: Defines STRUCT_VARIANT_ARRAY as an array of STRUCT_VARIANT values
    type: object
    properties:
      struct_variants:
        type: array
        items:
          $ref: "#/$defs/struct_variant_value"
      required:
        - struct_variants
      additionalProperties: false

  apply_data:
    title: DATA specialism
    description: Applies DATA values, disables properties that don't work with this type
    if:
      type: object
      properties:
        type:
          const: DATA
    then:
      type: object
      properties:
        value:
          $ref: "#/$defs/data_value"
        constraint: false
        precision: false
        max_length: false
        total_length: false

  data_payload:
    title: DATA Payload
    description: |
      How data is sent to the client.
    type: object
    properties:
      payload:
        oneOf:
          - type: string
            format: uri
            description: The URL of the data payload
          - type: string
            contentEncoding: base64
            contentMediaType: application/octet-stream
            description: The base64-encoded binary payload
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
      payload_encoding:
        description: |
          The encoding of the payload.
          This is another place where human readability/writeability is important.
          Protobuf uses a numeric value for the payload encoding so we use a oneOf
          to enable both numeric and string values.
        oneOf:
          - type: string
            enum: [UNCOMPRESSED, GZIP, DEFLATE]
            default: UNCOMPRESSED
          - type: integer
            enum: [0, 1, 2]
            default: 0
            examples: [0, 1, 2]
            oneOf:
              - const: 0
                title: UNCOMPRESSED
              - const: 1
                title: GZIP
              - const: 2
                title: DEFLATE


      digest:
        type: string
        contentMediaType: application/octet-stream
        contentEncoding: base64
        description: The SHA-256 digest of the payload
      metadata:
        type: object
        additionalProperties:
          type: string
        description: key/value pairs about the payload, e.g. mime-type, etc.
    required:
      - payload
    additionalProperties: false

  data_value:
    title: DATA Value
    description: Defines DATA either a URL or a binary payload
    type: object
    properties:
      data_payload:
        $ref: "#/$defs/data_payload"
    required:
      - data_payload

  read_only:
    title: Read Only flag
    description: If true, the parameter is read-only
    type: boolean
    default: false

  precision:
    title: Precision
    description: The number of decimal places to display for floating point values
    type: integer
    default: 0
    minimum: 0
    maximum: 10

  max_length:
    title: Maximum String Length
    description: |
      The maximum length of a string value, 
      or the maximum length of an element in a string array
    type: integer
    default: 0
    minimum: 0

  total_length:
    title: Total String Array Size
    description: The total length of a string array value
    type: integer
    default: 0
    minimum: 0

  widget:
    title: UI Widget
    description: Recommended UI widget to use for the parameter
    type: string

  access_scope:
    title: Access Scope
    description: |
      The parameter's access scope. If not present, the parameter's parent's
      access scope is used unless the parameter is a top-level one, in which
      case the device's default access scope is used.
    type: string
    enum: [st2138:mon, st2138:op, st2138:cfg, st2138:adm]

  client_hints:
    title: Client Hints
    description: |
      Additional information to assist clients in rendering the parameter.
      The keys are arbitrary, and the values are arbitrary strings.
      Length limit of 32 characters is to prevent abuse.
    type: object
    patternProperties:
      ^[a-zA-Z0-9_-]{1,32}$:
        type: string
    additionalProperties: false

  response: 
    title: Response
    description: | 
      Flag to indicate whether the parent command object produces a response.
    type: boolean
    default: false

  minimal_set:
    title: Minimal Set Flag
    description: |
      When true, indicates that the parameter is part of the minimal set of
      parameters that should be reported by the device.
    type: boolean
    default: false

  import:
    title: Import Directive
    description: |
      Provides the ability to build device models from multiple files.
      If a URL is provided, the import will be attempted from there.
      Otherwise a local file path can be provided.
    oneOf:
      - type: object
        properties:
          url:
            type: string
            format: uri
            description: The URL of the import file.
          digest:
            type: string
            contentMediaType: application/octet-stream
            contentEncoding: base64
            description: The SHA-256 digest of the import file.
        required: [url]
        additionalProperties: false
      
      - type: object
        properties:
          file:
            type: string
            description: Local path to the import file.
          digest:
            type: string
            contentMediaType: application/octet-stream
            contentEncoding: base64
            description: The SHA-256 digest of the import file.
        required: [file]
        additionalProperties: false

  oid_aliases:
    title: OID Aliases
    description: |
      Additional Object IDs that this parameter has had.
      This allows a client to locate a parameter that may previously have been
      known by another Object ID
    type: array
    items:
      type: string

  stateless:
    title: Stateless Flag
    description: |
      When true, indicates that the parameter is stateless and should not be
      persisted. Examples: time of day, audio meter, etc.
    type: boolean
    default: false

  device_component:
    title: Device Component
    description: |
      The device model can be broken into smaller components: parameters,
      commands, menus, etc. The entire device model can be sent as a single
      component.
    type: object
    oneOf:
      - $ref: "#"
      - $ref: "#/$defs/component_param"
      - $ref: "#/$defs/component_command"
      - $ref: "#/$defs/component_menu"
      - $ref: "#/$defs/component_constraint"
      - $ref: "#/$defs/component_language_pack"

  component_param:
    title: Component Param
    description: |
      A top-level parameter descriptor plus its oid.
      type: object
    properties:
      oid:
        $ref: "#/$defs/simple_oid"
      param:
        $ref: "#/$defs/param"
    required:
      - oid
      - param
    additionalProperties: false

  component_command:
    title: Component Command
    description: |
      A command descriptor plus its oid.
    type: object
    properties:
      oid:
        $ref: "#/$defs/simple_oid"
      command:
        $ref: "#/$defs/param"
    required:
      - oid
      - command
    additionalProperties: false

  component_menu:
    title: Component Menu
    description: |
      A menudescriptor plus its fqoid.
    type: object
    properties:
      oid:
        $ref: "#/$defs/fqoid"
      menu:
        $ref: "#/$defs/menu"
    required:
      - oid
      - menu
    additionalProperties: false

  component_constraint:
    title: Component Constraint
    description: |
      A constraint descriptor plus its oid.
    type: object
    properties:
      oid:
        $ref: "#/$defs/simple_oid"
      constraint:
        $ref: "#/$defs/constraint"
    required:
      - oid
      - constraint
    additionalProperties: false 

  component_language_pack:
    title: Component Language Pack
    description: |
      A language pack plus its oid.
    type: object
    properties:
      language:
        type: string
        maxLength: 32
      language_pack:
        $ref: "#/$defs/language_pack"
    required:
      - language
      - language_pack
    additionalProperties: false

  exception:
    title: Exception
    description: |
      One possible response to a command.
    type: object
    properties:
      type:
        type: string
      error_message:
        $ref: "#/$defs/polyglot_text"
      details:
        type: string

  empty:
    title: Empty
    description: |
      An empty response to a command.
    type: object
    additionalProperties: false

  execute_command_payload:
    title: Execute Command Payload
    description: |
      A command to be executed by the device.
    type: object
    properties:
      slot:
        $ref: "#/$defs/slot"
      oid:
        $ref: "#/$defs/fqoid"
      value:
        $ref: "#/$defs/value"
      respond:
        type: boolean
        default: false
        description: |
          When true, the device will respond to the command.
          When false, the device will not respond to the command.
    required:
      - slot
      - oid
    additionalProperties: false
    
  command_response:
    title: Command Response
    description: |
      Possible responses to a command.
    type: object
    oneOf:
      - type: object
        properties:
          no_response:
            $ref: "#/$defs/empty"
        required:
          - no_response
        additionalProperties: false
      - type: object
        properties:
          response:
            $ref: "#/$defs/value"
        required:
          - response
        additionalProperties: false
      - type: object
        properties:
          exception:
            $ref: "#/$defs/exception"
        required:
          - exception
        additionalProperties: false

  external_object_payload:
    title: External Object Payload
    description: |
      How assets/external objects are sent to the client.
    type: object
    properties:
      cachable:
        type: boolean
        default: false
      payload:
        $ref: "#/$defs/data_payload"
    required:
      - payload
    additionalProperties: false

  external_object_request_payload:
    title: External Object Request Payload
    description: |
      Information needed to identify the requested asset/external object.
    type: object
    properties:
      slot:
        $ref: "#/$defs/slot"
      oid:
        $ref: "#/$defs/fqoid"
    required:
      - slot
      - oid
    additionalProperties: false

  param_info:
    title: Param Info
    description: |
      Information about a parameter - it's id and descriptor.
    type: object
    properties:
      oid:
        $ref: "#/$defs/fqoid"
      param:
        $ref: "#/$defs/param"
    required:
      - oid
      - param
    additionalProperties: false

  param_info_request:
    title: Param Info Request
    description: |
      Information needed to identify the requested parameter.
    type: object
    properties:
      slot:
        $ref: "#/$defs/slot"
      oid_prefix:
        $ref: "#/$defs/fqoid"
      recursive:
        type: boolean
        default: false
    required:
      - slot
    additionalProperties: false

  param_info_response:
    title: Param Info Response
    description: |
      Information about a parameter - it's id and descriptor.
    type: object
    properties:
      info:
        $ref: "#/$defs/param_info"
      array_length:
        $ref: "#/$defs/total_length"
    required:
      - info
    additionalProperties: false

  push_updates:
    title: Push Updates
    description: |
      Asynchronous updates of various types to the client.
    allOf:
      - $ref: "#/$defs/with_slot"
      - oneOf:
        - $ref: "#/$defs/push_value"
        - $ref: "#/$defs/push_device_component"
        - $ref: "#/$defs/push_exception"
        - $ref: "#/$defs/push_invalidated_external_object_id"
        - $ref: "#/$defs/push_trap_message"
        - $ref: "#/$defs/push_invalidate_device_model"
        - $ref: "#/$defs/push_external_object"
        - $ref: "#/$defs/push_remove_device_components"
        - $ref: "#/$defs/push_slots_added"
        - $ref: "#/$defs/push_slots_removed"
 
  with_slot:
    title: With Slot
    description: |
      A slot is required for all updates.
    type: object
    properties:
      slot:
        $ref: "#/$defs/slot"
    required:
      - slot
    additionalProperties: false

  push_value:
    title: Push Value
    description: |
      A value to be pushed to the client.
    type: object
    properties:
      oid:
        $ref: "#/$defs/fqoid"
      value:
        $ref: "#/$defs/value"
    required:
      - oid
      - value
    additionalProperties: false
  
  push_device_component:
    title: Push Device Component
    description: |
      A device component to be pushed to the client.
    type: object
    properties:
      oid:
        $ref: "#/$defs/fqoid"
      device_component:
        $ref: "#/$defs/device_component"
    required:
      - oid
      - device_component
    additionalProperties: false

  push_exception:
    title: Push Exception
    description: |
      An exception to be pushed to the client.
    type: object
    properties:
      refused:
        $ref: "#/$defs/exception"
    required:
      - refused
    additionalProperties: false

  push_invalidated_external_object_id:
    title: Push Invalidated External Object ID
    description: |
      An external object id that has been invalidated.
    type: object
    properties:
      invalidated_external_object_id:
        type: string
    required:
      - invalidated_external_object_id
    additionalProperties: false

  trap_message_type: # see the proto file enum meanings
    title: Trap Message Type
    description: |
      The type of trap message.
      This is another place where human readability/writeability is important.
      Protobuf uses a numeric value for the trap message type so we use a oneOf
      to enable both numeric and string values.
    oneOf:
      - type: integer
        enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        default: 0
        examples: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        oneOf:
          - const: 0
            title: UNUSED
          - const: 1
            title: RESTART
          - const: 2
            title: PARAM_CHANGED
          - const: 3
            title: MENU_CHANGED
          - const: 4
            title: EXTERNAL_OBJECT_CHANGED
          - const: 5
            title: REVEAL_ELEMENT
          - const: 6
            title: HIDE_ELEMENT
          - const: 7
            title: RELOAD_UI_ELEMENT
          - const: 8
            title: STRING_OID_CHANGED
          - const: 9
            title: REBUILD_UI
      - type: string
        enum:
          - UNUSED
          - RESTART
          - PARAM_CHANGED
          - MENU_CHANGED
          - EXTERNAL_OBJECT_CHANGED
          - REVEAL_ELEMENT
          - HIDE_ELEMENT
          - RELOAD_UI_ELEMENT
          - STRING_OID_CHANGED
          - REBUILD_UI
        default: UNUSED

  push_trap_message:
    title: Push Trap Message
    description: |
      A trap message to be pushed to the client.
    type: object
    properties:
      type:
        $ref: "#/$defs/trap_message_type"
    required:
      - trap_message
    additionalProperties: false

  push_invalidate_device_model:
    title: Push Invalidate Device Model
    description: |
      Inform the client that the device model has been invalidated.
    type: object
    properties:
      invalidate_device_model:
        type: boolean
        default: false
    required:
      - invalidate_device_model
    additionalProperties: false

  push_external_object:
    title: Push External Object
    description: |
      A external object to be pushed to the client.
    type: object
    properties:
      oid:
        $ref: "#/$defs/fqoid"
      external_object:
        $ref: "#/$defs/external_object_payload"
    required:
      - oid
      - external_object
    additionalProperties: false
  
  id_list:
    title: ID List
    description: |
      A list of object ids (OIDs)
    type: array
    items:
      $ref: "#/$defs/fqoid"

  language_list:
    title: Language List
    description: |
      A list of language codes identifying the languages that the device
      supports.
    type: array
    items:
      $ref: "#/$defs/language_code"

  push_remove_device_components:
    title: Push Remove Device Components
    description: |
      A list of device components to be removed from the client.
    type: object
    oneOf:
      - type: object
        properties:
          params:
            $ref: "#/$defs/id_list"
        required:
          - params
        additionalProperties: false

      - type: object
        properties:
          shared_constraints:
            $ref: "#/$defs/id_list"
        required:
          - shared_constraints
        additionalProperties: false

      - type: object
        properties:
          menus:
            $ref: "#/$defs/id_list"
        required:
          - menus
        additionalProperties: false

      - type: object
        properties:
          commands:
            $ref: "#/$defs/id_list"
        required:
          - commands
        additionalProperties: false

      - type: object
        properties:
          language_packs:
            type: array
            items:
              $ref: "#/$defs/language_code"
        required:
          - language_packs
        additionalProperties: false
      
  push_slots_added:
    title: Push Slots Added
    description: |
      A list of slots that now contain a new device model.
    type: object
    properties:
      slots_added:
        type: array
        items:
          $ref: "#/$defs/slot"
    required:
      - slots_added
    additionalProperties: false

  push_slots_removed:
    title: Push Slots Removed
    description: |
      A list of slots that have been removed from the client.
    type: object
    properties:
      slots_removed:
        type: array
        items:
          $ref: "#/$defs/slot"
    required:
      - slots_removed
    additionalProperties: false

  language_pack_request_payload:
    title: Language Pack Request Payload
    description: |
      Information needed to identify the requested language pack.
    type: object
    properties:
      slot:
        $ref: "#/$defs/slot"
      language: 
        $ref: "#/$defs/language_code"
    required:
      - slot
      - language
    additionalProperties: false

  add_language_payload:
    title: Add Language Payload
    description: |
      Information needed to add a language to the device.
    type: object
    properties:
      slot:
        $ref: "#/$defs/slot"
      language_pack:
        $ref: "#/$defs/language_pack"
      language:
        $ref: "#/$defs/language_code" 
    required:
      - slot
      - language
    additionalProperties: false

  refresh_token_payload:
    title: Refresh Token Payload
    description: |
      Request to refresh the access token with the one in the request metadata
      and extend the expiry time of all active connections to the exp 
      claim in the new token.
    type: object
    properties:
      reason:
        type: string
        description: e.g. avoid timeout, key rotation, etc.
    additionalProperties: false

  revoke_access_payload:
    title: Revoke Access Payload
    description: |
      Request to revoke access for a subject.
    type: object
    properties:
      subject:
        type: string
        description: e.g. user id, device id, etc.
      reason:
        type: string
        description: e.g. avoid timeout, key rotation, etc.
      revoke_all:
        type: boolean
        description: True to revoke access for all subjects
    required:
      - subject
      - revoke_all
    additionalProperties: false

  connection_status:
    title: Connection Status
    description: |
      Response to the RefreshToken request.
    type: object
    properties:
      connected:
        type: boolean
        description: True if client has any active streaming connections
      exp:
        type: integer
        description: Time that new token will expire
    required:
      - connected
      - exp
    additionalProperties: false

  revocation_response:
    title: Revocation Response
    description: |
      Response to the RevokeAccess request.
    type: object
    properties:
      remaining_subjects:
        type: array
        items:
          type: string
      revoked_subjects:
        type: array
        items:
          type: string
    required:
      - remaining_subjects
      - revoked_subjects
    additionalProperties: false 

