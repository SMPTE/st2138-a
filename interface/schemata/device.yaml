#
# Copyright (c) by the Society of Motion Picture and Television Engineers
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

$id: https://raw.githubusercontent.com/SMPTE/st2138-a/main/interface/schemata/device.yaml
$schema: https://json-schema.org/draft/2020-12/schema
title: Schema for Catena's Device Model
description: |
  Intended to assist humans to author Catena device models as JSON files as
  some IDEs can use schemata such as this one to lint models.
  
type: object
properties:
  params:
    type: object
    patternProperties:
      ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
        $ref: ./param.yaml
    additionalProperties: false
  commands:
    type: object
    patternProperties:
      ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
        $ref: ./param.yaml
    additionalProperties: false
  access_scopes:
    $ref: "#/$defs/access_scopes"
  default_scope:
    $ref: "#/$defs/default_scope"
  slot:
    $ref: "#/$defs/slot"
  detail_level:
    $ref: "#/$defs/detail_level"
  multi_set_enabled:
    $ref: "#/$defs/multi_set_enabled"
  subscriptions:
    $ref: "#/$defs/subscriptions"
  constraints:
    $ref: "#/$defs/constraint_map"
  language_packs:
    $ref: "#/$defs/language_packs"
  menu_groups:
    $ref: "#/$defs/menu_groups"
additionalProperties: false

$defs:
  access_scopes:
    title: Access Scopes
    description: |
      The access scopes recognized by this the device.
    type: array
    items:
      type: string
      enum:
        - st2138:mon
        - st2138:mon:w
        - st2138:op
        - st2138:op:w
        - st2138:cfg
        - st2138:cfg:w
        - st2138:adm
        - st2138:adm:w
  
  default_scope:
    title: Default Scope
    description: |
      The default scope for the device.
      Objects in the model will have this access scope unless overridden
      explicitly, or implicitly by inheritance
    type: string
    default: ""

  slot:
    title: Slot
    description: |
      The slot number of the device. Must be unique within the connection.
    type: integer
    default: 0
    minimum: 0
    maximum: 65535

  slot_list:
    title: Slot List
    description: |
      A list of slot numbers.
    type: array
    items:
      $ref: "#/$defs/slot"
    uniqueItems: true

  detail_level:
    title: Detail Level
    description: |
      The level of detail in device messages and parameter updates.
      'full' indicates that all parameters are reported, 
      'minimal' that only the minimal set is, 
      'subscriptions' reports the minimal set plus identified subscribed
      parameters, 
      'commands' reports only descriptors for commands and not for parameters,
      and 'none' indicates that no parameters or commands should be
      automatically reported by the device (parameter descriptors, command
      descriptors, and values can still be pulled).
    type: string
    enum:
      - FULL
      - MINIMAL
      - SUBSCRIPTIONS
      - COMMANDS
      - NONE
    default: FULL

  multi_set_enabled:
    title: Multi Set Enabled Flag
    description: |
      If true, the device supports multi-set operations. These are idempotent
      operations that can be used to set multiple parameters in a single
      operation.
    type: boolean
    default: false

  subscriptions:
    title: Subscriptions
    description: |
      When true, indicates that the device supports subscription-based 
      access to subsets of parameters.
    type: boolean
    default: false

  constraint_map:
    title: Constraint Map
    description: |
      A map of top-level shared constraints
    type: object
    patternProperties:
      ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
        $ref: "./param.yaml#/$defs/constraint"
    additionalProperties: false

  language_packs:
    title: Language Packs
    description: |
      Language Packs A map of language identifiers to resource dictionaries
      or language packs for each language supported. The keys are 
      from the ISO 639-1 language code, e.g. 
      \"es\" for Global Spanish.
      \"es-CO\" for Colombian Spanish.
      \"pl\" for Jezyk polski"
    type: object
    properties:
      packs:
        type: object
        additionalProperties:
          $ref: "#/$defs/language_pack"

  language_pack:
    title: Language Pack
    description: |
      Language Pack A map of string identifiers, e.g. \"greeting\" to strings
      which are all in the same language.
    type: object
    properties:
      name:
        type: string
        description: |
          The name of the language pack.
      words:
        type: object
        description: |
          A map of string identifiers to strings.
        additionalProperties:
          type: string

  menu_groups:
    title: Menu Groups
    description: |
      A map of menu groups.
    type: object
    patternProperties:
      ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
        $ref: "#/$defs/menu_group"
  
  menu_group:
    title: Menu Group
    description: |
      A operationally logical grouping of menus.
    type: object
    properties:
      name:
        $ref: "./param.yaml#/$defs/polyglot_text"
      menus:
        $ref: "#/$defs/menus"
    additionalProperties: false

  menus:
    title: Menus
    description: |
      A map of menus.
    type: object
    patternProperties:
      ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
        $ref: "#/$defs/menu"
    additionalProperties: false

  menu:
    title: Menu
    description: |
      A logical grouping of parameters or commands (or both)
    type: object
    properties:
      name:
        $ref: "./param.yaml#/$defs/polyglot_text"
      param_oids:
        $ref: "#/$defs/oid_list"
      command_oids:
        $ref: "#/$defs/oid_list"
      client_hints:
        $ref: "./param.yaml#/$defs/client_hints"
      hidden:
        title: Hidden
        description: |
          Whether the menu should be hidden in the client GUI.
        type: boolean
        default: false
      disabled:
        title: Disabled
        description: |
          Whether the menu should be disabled (shown as read-only) in the client GUI.
        type: boolean
        default: false
    additionalProperties: false
    
  oid_list:
    title: OID List
    description: |
      A list of fully qualified OIDs.
    type: array
    items:
      type: string
      format: json-pointer
