openapi: 3.1.0
info:
  title: Catena API
  version: '1.0'
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
servers:
  - url: https://device.catenamedia.tv:443/st2138-api/v1
security:
  - oauth2:
      - st2138:op
  - oauth2:
      - st2138:cfg
  - oauth2:
      - st2138:adm
  - oauth2:
      - st2138:mon
paths:
  /health:
    get:
      summary: Checks the health of a Catena REST service
      operationId: Health
      tags:
        - Discovery
      responses:
        '200':
          description: Indicates that the Catena REST service is healthy
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /devices:
    get:
      summary: Gets a list of slot numbers that are occupied by a device
      description: Retrieves a list of slot numbers that are occupied by a device.
      operationId: Devices
      tags:
        - Discovery
      responses:
        '200':
          description: A list of the slot numbers that are occupied by a device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slot_list'
              example:
                - 2
                - 3
                - 5
                - 7
                - 11
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /{slot}:
    get:
      summary: Gets a device model with a single request. Note that device models can be very large, and so clients should consider using the streaming endpoint instead.
      operationId: DeviceRequest
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model to request components from
          schema:
            $ref: '#/components/schemas/slot'
        - name: Detail-Level
          in: header
          required: false
          description: The level of detail to request the device in
          schema:
            $ref: '#/components/schemas/detail_level'
            default: full
      tags:
        - Discovery
      responses:
        '200':
          description: A device model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device'
              example:
                slot: 1
                multi_set_enabled: true
                subscriptions: true
                access_scopes:
                  - st2138:mon
                  - st2138:op
                  - st2138:cfg
                  - st2138:adm
                default_scope: st2138:op
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /{slot}/stream:
    get:
      summary: Gets a device model with as a stream of stringified DeviceComponents.
      operationId: DeviceStreamRequest
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model to request components from
          schema:
            $ref: '#/components/schemas/slot'
        - name: Detail-Level
          in: header
          required: false
          description: The level of detail to request the device in
          schema:
            $ref: '#/components/schemas/detail_level'
      tags:
        - Discovery
      responses:
        '200':
          description: |
            A stream of device components from the device in the
            specified slot. These updates are sent as server-sent events and
            have stringified JSON in their data field.
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                data: <stringified ComponentParam>
                data: <stringified ComponentConstraint>
                data: <more DeviceComponents>
              x-sse-event-schema:
                title: Device Component
                description: |
                  The device model can be broken into smaller components: parameters,
                  commands, menus, etc. The entire device model can be sent as a single
                  component.
                type: object
                oneOf:
                  - $ref: '#/components/schemas/device'
                  - $ref: '#/components/schemas/component_param'
                  - $ref: '#/components/schemas/component_command'
                  - $ref: '#/components/schemas/component_menu'
                  - $ref: '#/components/schemas/component_constraint'
                  - $ref: '#/components/schemas/component_language_pack'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /{slot}/command/{fqoid}:
    post:
      summary: Execute a command on a device model
      operationId: ExecuteCommand
      security:
        - oauth2:
            - st2138:op:w
        - oauth2:
            - st2138:cfg:w
        - oauth2:
            - st2138:adm:w
        - oauth2:
            - st2138:mon:w
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model to get the value from
          schema:
            $ref: '#/components/schemas/slot'
        - name: fqoid
          in: path
          required: true
          description: The fully qualified object ID of the command to execute
          schema:
            $ref: '#/components/schemas/fqoid'
        - name: respond
          in: query
          required: false
          description: flag to suppress the server's response unless set to true
          schema:
            type: string
            enum:
              - 'true'
            default: 'true'
      tags:
        - Commands
      requestBody:
        required: false
        description: Optional value to pass to the command if required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/value'
            example:
              float32_value: 0.5
      responses:
        '200':
          description: |
            If 'respond' is true, the server's response will one or more 'Values',
            empty responses, or exceptions. If 'respond' is false, the server will
            not respond with content, just the status code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command_response'
              example:
                response:
                  string_value: Command executed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /{slot}/command/{fqoid}/stream:
    post:
      summary: Execute a command on a device model
      operationId: ExecuteCommandStream
      security:
        - oauth2:
            - st2138:op:w
        - oauth2:
            - st2138:cfg:w
        - oauth2:
            - st2138:adm:w
        - oauth2:
            - st2138:mon:w
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model to get the value from
          schema:
            $ref: '#/components/schemas/slot'
        - name: fqoid
          in: path
          required: true
          description: The fully qualified object ID of the command to execute
          schema:
            $ref: '#/components/schemas/fqoid'
        - name: respond
          in: query
          required: false
          description: flag to suppress the server's response unless set to true
          schema:
            type: string
            enum:
              - 'true'
            default: 'true'
      tags:
        - Commands
      requestBody:
        required: false
        description: Optional value to pass to the command if required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/value'
            example:
              float32_value: 0.5
      responses:
        '200':
          description: |
            If 'respond' is true, the server's response will be a stream of command
            responses. If 'respond' is false, the server will not respond with
            content, just the status code.
            The response is a sequence of stringified JSON objects, each containing
            a single command response.
            Each object in the stream has the following structure:
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                data: <stringified {"no_response":{}}>
                data: <stringified {"response":{"string_value":"Command executed successfully"}}>
                data: <stringified {"exception":{"type":"Invalid Command","error_message":"Error message","details":"Something went wrong"}}>
              x-sse-event-schema:
                title: Command Response
                description: |
                  Possible responses to a command.
                type: object
                oneOf:
                  - type: object
                    properties:
                      no_response:
                        $ref: '#/components/schemas/empty'
                    required:
                      - no_response
                    additionalProperties: false
                  - type: object
                    properties:
                      response:
                        $ref: '#/components/schemas/value'
                    required:
                      - response
                    additionalProperties: false
                  - type: object
                    properties:
                      exception:
                        $ref: '#/components/schemas/exception'
                    required:
                      - exception
                    additionalProperties: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /{slot}/asset/{fqoid}:
    get:
      summary: get an asset without streaming
      operationId: GetAsset
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model to get the value from
          schema:
            $ref: '#/components/schemas/slot'
        - name: fqoid
          in: path
          required: true
          description: The fully qualified object ID of the asset to get
          schema:
            $ref: '#/components/schemas/fqoid'
          example: image.png
        - name: compression
          in: query
          required: false
          description: The compression method to use. If not provided, the asset will be sent uncompressed.
          schema:
            type: string
            enum:
              - UNCOMPRESSED
              - GZIP
              - DEFLATE
          example: UNCOMPRESSED
      tags:
        - Assets
      responses:
        '200':
          description: |
            The server's response will be one or more 'ExternalObjectPayloads'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_object_payload'
                example:
                  cachable: true
                  payload:
                    metadata:
                      size: '13'
                      last-modified: Fri Apr 8 12:00:00 2025
                      filename: asset.png
                    digest: sha256:h654h654y564yh543
                    payloadEncoding: GZIP
                    payload: payloadString
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      summary: load an asset
      operationId: LoadAsset
      security:
        - oauth2:
            - st2138:adm:w
        - oauth2:
            - st2138:op:w
        - oauth2:
            - st2138:cfg:w
      tags:
        - Assets
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model to get the value from
          schema:
            $ref: '#/components/schemas/slot'
        - name: fqoid
          in: path
          required: true
          description: The place to store the asset
          schema:
            $ref: '#/components/schemas/fqoid'
          example: image.png
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_object_payload'
      responses:
        '204':
          description: Empty response - everything is OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Overwrite an asset
      operationId: OverwriteAsset
      security:
        - oauth2:
            - st2138:adm:w
        - oauth2:
            - st2138:op:w
        - oauth2:
            - st2138:cfg:w
      tags:
        - Assets
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model to get the value from
          schema:
            $ref: '#/components/schemas/slot'
        - name: fqoid
          in: path
          required: true
          description: The place to store the asset
          schema:
            $ref: '#/components/schemas/fqoid'
          example: image.png
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_object_payload'
      responses:
        '204':
          description: Empty response - everything is OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      summary: Delete an asset
      operationId: DeleteAsset
      security:
        - oauth2:
            - st2138:adm:w
        - oauth2:
            - st2138:op:w
        - oauth2:
            - st2138:cfg:w
      tags:
        - Assets
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model to get the value from
          schema:
            $ref: '#/components/schemas/slot'
        - name: fqoid
          in: path
          required: true
          description: The fully qualified object ID of the asset to delete
          schema:
            $ref: '#/components/schemas/fqoid'
          example: image.png
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_object_payload'
      responses:
        '204':
          description: Empty response - everything is OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /{slot}/asset/{fqoid}/stream:
    get:
      summary: get an asset, or a stream of assets from the device
      operationId: AssetStream
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model to get the value from
          schema:
            $ref: '#/components/schemas/slot'
        - name: fqoid
          in: path
          required: true
          description: The fully qualified object ID of the asset to get
          schema:
            $ref: '#/components/schemas/fqoid'
          example: image.png
      tags:
        - Assets
      responses:
        '200':
          description: |
            The server's response will be a stream of ExternalObjectPayload
            objects
          content:
            text/event-stream:
              schema:
                type: string
                example: |
                  data: <stringified ExternalObjectPayload>
                  data: <stringified ExternalObjectPayload>
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /{slot}/param-info/{fqoid}:
    get:
      summary: "Gets information about a parameter within a device model. \nBecause this is a unary request, recursive queries are not supported.\n"
      operationId: ParamInfo
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model containing the parameters to get info for
          schema:
            $ref: '#/components/schemas/slot'
        - name: fqoid
          in: path
          required: true
          description: Fully qualified OID of the parameter to get info for
          schema:
            $ref: '#/components/schemas/fqoid'
      tags:
        - Parameters
        - Subscriptions
      responses:
        '200':
          description: |
            Returns information about the parameter specified by the fqoid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/param_info'
              example:
                info:
                  oid: text_box
                  name:
                    display_strings:
                      en: Text Box
                      fr: Boîte de Texte
                      es: Caja de Texto
                  type: STRING
                  value:
                    string_value: Hello, World!
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /{slot}/param-info/{fqoid}/stream:
    get:
      summary: Gets information about parameters within a device model
      operationId: ParamInfoStream
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model containing the parameters to get info for
          schema:
            $ref: '#/components/schemas/slot'
        - name: recursive
          in: query
          required: false
          description: Optional flag to recursively get info for all children. The presence of this parameter enables recursion, regardless of its value. (The value is ignored; any value such as "true" will have the same effect.)
          schema:
            type: boolean
          style: form
          explode: false
        - name: fqoid
          in: path
          required: true
          description: The prefix of the OID to get info for
          schema:
            $ref: '#/components/schemas/fqoid'
          default: ''
      tags:
        - Parameters
        - Subscriptions
      responses:
        '200':
          description: |
            Returns a stream of basic information about the specified parameter(s).
            The response is a sequence of stringified JSON objects, each containing information about a single parameter.
            Each object in the stream has the following structure:
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                data: <stringified {info: ParamInfo, array_length: 0}>
                data: <stringified {info: ParamInfo, array_length: 1}>
                data: <stringified {info: ParamInfo, array_length: 2}>
              x-sse-event-schema:
                title: Param Info
                description: |
                  Information about a parameter - it's id and descriptor.
                type: object
                properties:
                  oid:
                    $ref: '#/components/schemas/fqoid'
                  param:
                    $ref: '#/components/schemas/param'
                required:
                  - oid
                  - param
                additionalProperties: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /{slot}/param-info/stream:
    get:
      summary: Gets information about all top-level parameters within a device model
      operationId: TopLevelParamInfoStream
      parameters:
        - name: slot
          in: path
          required: true
          description: The slot of the device model containing the parameters to get info for
          schema:
            $ref: '#/components/schemas/slot'
        - name: recursive
          in: query
          required: false
          description: Optional flag to recursively get info for all children. The presence of this parameter enables recursion, regardless of its value. (The value is ignored; any value such as "true" will have the same effect.)
          schema:
            type: boolean
          style: form
          explode: false
      tags:
        - Parameters
        - Subscriptions
      responses:
        '200':
          description: |
            Returns a stream of basic information about all top-level parameters in the device model.
            The response is a sequence of stringified JSON objects, each containing information about a single parameter.
            Each object in the stream has the following structure:
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                data: <stringified {info: ParamInfo, array_length: 0}>
                data: <stringified {info: ParamInfo, array_length: 1}>
                data: <stringified {info: ParamInfo, array_length: 2}>
              x-sse-event-schema:
                title: Param Info
                description: |
                  Information about a parameter - it's id and descriptor.
                type: object
                properties:
                  oid:
                    $ref: '#/components/schemas/fqoid'
                  param:
                    $ref: '#/components/schemas/param'
                required:
                  - oid
                  - param
                additionalProperties: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
components:
  responses:
    NotFound:
      description: The requested resource was not found
    BadRequest:
      description: Bad Request - Invalid input parameters or malformed request
    Unauthorized:
      description: Unauthorized, access token is either missing or invalid
    Forbidden:
      description: Forbidden, insufficient permission for access
    InternalServerError:
      description: An error occurred while processing the request
    ServiceUnavailable:
      description: The service is temporarily unavailable
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://device.catenamedia.tv/api/v1/oauth2/token
          scopes:
            st2138:op: Read only access to operate a device
            st2138:op:w: Read and write access to operate a device
            st2138:cfg: Read only access to configure a device
            st2138:cfg:w: Read and write access to configure a device
            st2138:adm: Read only access to administer a device
            st2138:adm:w: Read and write access to administer a device
            st2138:mon: Read only access to monitor a device
            st2138:mon:w: Read and write access to monitor a device
  schemas:
    slot:
      title: Slot
      description: |
        The slot number of the device. Must be unique within the connection.
      type: integer
      default: 0
      minimum: 0
      maximum: 65535
    slot_list:
      title: Slot List
      description: |
        A list of slot numbers.
      type: array
      items:
        $ref: '#/components/schemas/slot'
      uniqueItems: true
    detail_level:
      title: Detail Level
      description: "The level of detail in device messages and parameter updates.\n'full' indicates that all parameters are reported, \n'minimal' that only the minimal set is, \n'subscriptions' reports the minimal set plus identified subscribed\nparameters, \n'commands' reports only descriptors for commands and not for parameters,\nand 'none' indicates that no parameters or commands should be\nautomatically reported by the device (parameter descriptors, command\ndescriptors, and values can still be pulled).\n"
      type: string
      enum:
        - FULL
        - MINIMAL
        - SUBSCRIPTIONS
        - COMMANDS
        - NONE
      default: FULL
    int32:
      title: INT32
      description: Defines INT32 as a primitive number type
      type: integer
      minimum: -2147483648
      maximum: 2147483647
    language_code:
      title: Language Codes Table
      description: |
        A table of standard language identifying codes.
      $comment: "There may be a published reference we can use instead of inlining this here.\nNote that this is not (yet) a complete list of all possible language codes.\nFor readability and maintenance considerations, the codes are grouped by \nmajor language.\n"
      type: object
      patternProperties:
        ^(en|en-AU|en-CA|en-HK|en-IE|en-MY)$:
          title: English Language group
          type: string
        ^(es|es-ES|es-AR|es-BO|es-CL|es-CO)$:
          title: Spanish Language group
          type: string
        ^(fr|fr-FR|fr-BE|fr-CA|fr-CH)$:
          title: French Language group
          type: string
        ^(de|de-DE|de-AT|de-CH)$:
          title: German Language group
          type: string
      additionalProperties: false
    language_pack_reference:
      title: Language Pack Reference
      description: |
        A reference to a language pack.
      type: object
      properties:
        $key:
          type: string
          description: The ID of the language pack.
      required:
        - $key
      additionalProperties: false
    polyglot_text:
      title: Polyglot Text
      description: Text that a client can display in one of multiple languages
      type: object
      properties:
        display_strings:
          type: object
          anyOf:
            - $ref: '#/components/schemas/language_code'
            - $ref: '#/components/schemas/language_pack_reference'
          minProperties: 1
      additionalProperties: false
    int32_choice:
      title: INT_CHOICE Constraint
      description: Maps strings intended for use in pick-lists to integer values
      type: object
      properties:
        value:
          $ref: '#/components/schemas/int32'
        name:
          $ref: '#/components/schemas/polyglot_text'
      required:
        - value
        - name
      additionalProperties: false
    alarm:
      title: Alarm
      description: |
        Defines an alarm in terms of its severity and a description of the problem causing it.
        Alarms occupy one bit in the alarm table allowing up to 32 different alarms to be reported.
      type: object
      properties:
        bit_value:
          type: integer
          minimum: 0
          maximum: 31
        severity:
          type: string
          enum:
            - INFO
            - WARNING
            - SEVERE
            - UNKNOWN
        description:
          $ref: '#/components/schemas/polyglot_text'
      required:
        - bit_value
        - severity
        - description
      additionalProperties: false
    int32_constraint:
      title: INT32 Constraint
      description: Polymorphic depending on the type of constraint applied
      type: object
      allOf:
        - if:
            type: object
            properties:
              type:
                const: INT_CHOICE
          then:
            type: object
            properties:
              type:
                const: INT_CHOICE
              int32_choice:
                type: object
                properties:
                  choices:
                    type: array
                    items:
                      $ref: '#/components/schemas/int32_choice'
                required:
                  - choices
                additionalProperties: false
            additionalProperties: false
        - if:
            type: object
            properties:
              type:
                const: INT_RANGE
          then:
            type: object
            properties:
              type:
                const: INT_RANGE
              int32_range:
                type: object
                properties:
                  min_value:
                    $ref: '#/components/schemas/int32'
                  max_value:
                    $ref: '#/components/schemas/int32'
                  step:
                    $ref: '#/components/schemas/int32'
                  display_min_value:
                    $ref: '#/components/schemas/int32'
                  display_max_value:
                    $ref: '#/components/schemas/int32'
                required:
                  - min_value
                  - max_value
                additionalProperties: false
            additionalProperties: false
        - if:
            type: object
            properties:
              type:
                const: ALARM_TABLE
          then:
            type: object
            properties:
              type:
                const: ALARM_TABLE
              alarm_table:
                type: object
                properties:
                  alarms:
                    type: array
                    items:
                      $ref: '#/components/schemas/alarm'
                    maxItems: 32
                required:
                  - alarms
                additionalProperties: false
            additionalProperties: false
    constraint:
      title: Constraint to define the parameter's allowed values
      description: Polymorphic depending on the type of constraint applied
      type: object
      properties:
        type:
          title: Constraint Type
          description: The type of constraint applied
          type: string
          enum:
            - UNDEFINED
            - INT_CHOICE
            - INT_RANGE
            - ALARM_TABLE
            - FLOAT_RANGE
            - STRING_CHOICE
            - STRING_STRING_CHOICE
            - ALARM_TABLE
          default: UNDEFINED
      required:
        - type
      oneOf:
        - $ref: '#/components/schemas/int32_constraint'
    language_pack:
      title: Language Pack
      description: |
        Language Pack A map of string identifiers, e.g. \"greeting\" to strings
        which are all in the same language.
      type: object
      properties:
        name:
          type: string
          description: |
            The name of the language pack.
        words:
          type: object
          description: |
            A map of string identifiers to strings.
          additionalProperties:
            type: string
    oid_list:
      title: OID List
      description: |
        A list of fully qualified OIDs.
      type: array
      items:
        type: string
        format: json-pointer
    client_hints:
      title: Client Hints
      description: |
        Additional information to assist clients in rendering the parameter.
        The keys are arbitrary, and the values are arbitrary strings.
        Length limit of 32 characters is to prevent abuse.
      type: object
      patternProperties:
        ^[a-zA-Z0-9_-]{1,32}$:
          type: string
      additionalProperties: false
    menu:
      title: Menu
      description: |
        A logical grouping of parameters or commands (or both)
      type: object
      properties:
        name:
          $ref: '#/components/schemas/polyglot_text'
        param_oids:
          $ref: '#/components/schemas/oid_list'
        command_oids:
          $ref: '#/components/schemas/oid_list'
        client_hints:
          $ref: '#/components/schemas/client_hints'
        hidden:
          title: Hidden
          description: |
            Whether the menu should be hidden in the client GUI.
          type: boolean
          default: false
        disabled:
          title: Disabled
          description: |
            Whether the menu should be disabled (shown as read-only) in the client GUI.
          type: boolean
          default: false
      additionalProperties: false
    menus:
      title: Menus
      description: |
        A map of menus.
      type: object
      patternProperties:
        ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
          $ref: '#/components/schemas/menu'
      additionalProperties: false
    menu_group:
      title: Menu Group
      description: |
        A operationally logical grouping of menus.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/polyglot_text'
        menus:
          $ref: '#/components/schemas/menus'
      additionalProperties: false
    int32_value:
      title: INT32 Value
      description: Defines INT32 as a primitive number type
      type: object
      properties:
        int32_value:
          $ref: '#/components/schemas/int32'
      required:
        - int32_value
      additionalProperties: false
    simple_oid:
      title: Simple OID
      description: |
        A simple OID is used as a key in a map of string keys to values.
        Because it is also potentially used by code generators, its length and
        character set are restricted.
      type: string
      pattern: ^[a-zA-Z]\w{0,30}$
      default: ''
    constraint_ref:
      title: Constraint Reference
      description: A reference to a constraint that is shared by multiple parameters.
      type: object
      properties:
        ref_oid:
          $ref: '#/components/schemas/simple_oid'
      required:
        - ref_oid
      additionalProperties: false
    apply_int32:
      title: INT32 specialism
      description: Applies INT32 values & constraints, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: INT32
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/int32_value'
          constraint:
            oneOf:
              - $ref: '#/components/schemas/int32_constraint'
              - $ref: '#/components/schemas/constraint_ref'
          precision: false
          max_length: false
          total_length: false
    float32:
      title: FLOAT32
      description: Defines FLOAT32 as a primitive number type
      type: number
      minimum: -3.4028234663852886e+38
      maximum: 3.4028234663852886e+38
      default: 0
    float32_value:
      title: FLOAT32 Value
      description: Defines FLOAT32 as a primitive number type
      type: object
      properties:
        float32_value:
          $ref: '#/components/schemas/float32'
      required:
        - float32_value
      additionalProperties: false
    float32_constraint:
      title: FLOAT32 Constraint
      description: |
        There is currently only one constraint type for FLOAT32, FLOAT_RANGE.
        The intent of this schema is to allow for future expansion of constraint types.
      type: object
      allOf:
        - if:
            type: object
            properties:
              type:
                const: FLOAT_RANGE
          then:
            type: object
            properties:
              type:
                const: FLOAT_RANGE
              float32_range:
                type: object
                properties:
                  min_value:
                    $ref: '#/components/schemas/float32'
                  max_value:
                    $ref: '#/components/schemas/float32'
                  step:
                    $ref: '#/components/schemas/float32'
                  display_min_value:
                    $ref: '#/components/schemas/float32'
                  display_max_value:
                    $ref: '#/components/schemas/float32'
                required:
                  - min_value
                  - max_value
                additionalProperties: false
            additionalProperties: false
    apply_float32:
      title: FLOAT specialism
      description: Applies FLOAT32 values & constraints, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: FLOAT32
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/float32_value'
          constraint:
            oneOf:
              - $ref: '#/components/schemas/float32_constraint'
              - $ref: '#/components/schemas/constraint_ref'
          max_length: false
          total_length: false
    string_value:
      title: STRING Value
      description: Defines STRING as a primitive string type
      type: object
      properties:
        string_value:
          type: string
      required:
        - string_value
      additionalProperties: false
    string_choice:
      title: STRING_CHOICE Constraint
      description: |
        Maps strings intended for use in pick-lists to string values.
        Not multi-lingual.
        Has a flag, strict, that if true, will only allow values that are in the choices array.
        If false, will allow any string value.
      type: object
      properties:
        choices:
          type: array
          items:
            type: string
        strict:
          type: boolean
          default: false
      required:
        - choices
      additionalProperties: false
    string_string_choice:
      title: STRING_STRING_CHOICE Constraint
      description: |
        Maps strings intended for use in pick-lists to string values.
        Has a flag, strict, that if true, will only allow values that are in the choices array.
        If false, will allow any string value.
        Has multi-language support.
      type: object
      properties:
        choices:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              name:
                $ref: '#/components/schemas/polyglot_text'
            required:
              - name
              - value
            additionalProperties: false
        strict:
          type: boolean
          default: false
      required:
        - choices
      additionalProperties: false
    string_constraint:
      title: STRING Constraint
      description: Provides two ways of constraining a string value to a set of choices
      type: object
      allOf:
        - if:
            type: object
            properties:
              type:
                const: STRING_CHOICE
          then:
            type: object
            properties:
              type:
                const: STRING_CHOICE
              string_choice:
                $ref: '#/components/schemas/string_choice'
            required:
              - string_choice
            additionalProperties: false
        - if:
            type: object
            properties:
              type:
                const: STRING_STRING_CHOICE
          then:
            type: object
            properties:
              type:
                const: STRING_STRING_CHOICE
              string_string_choice:
                $ref: '#/components/schemas/string_string_choice'
            additionalProperties: false
    apply_string:
      title: STRING specialism
      description: Applies STRING values & constraints, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: STRING
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/string_value'
          constraint:
            oneOf:
              - $ref: '#/components/schemas/string_constraint'
              - $ref: '#/components/schemas/constraint_ref'
          precision: false
          total_length: false
    value:
      title: Parameter Value
      description: Value of the parameter. Its schema is polymorphic dependent on type.
    struct_fields:
      title: STRUCT Fields
      description: Defines a map of string keys to values
      type: object
      patternProperties:
        ^[a-zA-Z]\w{0,30}$:
          $ref: '#/components/schemas/value'
      minProperties: 1
      additionalProperties: false
    struct_value:
      title: STRUCT Value
      description: Defines STRUCT as a map of string keys to values
      type: object
      properties:
        struct_value:
          type: object
          properties:
            fields:
              $ref: '#/components/schemas/struct_fields'
          required:
            - fields
          additionalProperties: false
      required:
        - struct_value
      additionalProperties: false
    apply_struct:
      title: STRUCT specialism
      description: Applies STRUCT values & constraints, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: STRUCT
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/struct_value'
          constraint: false
          precision: false
          max_length: false
          total_length: false
    struct_variant_value:
      title: STRUCT_VARIANT Value
      description: |
        Says which variant of the struct is being used and the value of that variant.
      type: object
      properties:
        struct_variant_value:
          type: object
          properties:
            struct_variant_type:
              $ref: '#/components/schemas/simple_oid'
            value:
              $ref: '#/components/schemas/value'
          required:
            - struct_variant_type
            - value
          additionalProperties: false
      additionalProperties: false
    apply_struct_variant:
      title: STRUCT_VARIANT specialism
      description: Applies STRUCT_VARIANT values, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: STRUCT_VARIANT
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/struct_variant_value'
          constraint: false
          precision: false
          max_length: false
          total_length: false
    int32_array_values:
      title: INT32_ARRAY Value
      description: Defines INT32_ARRAY as an array of INT32 values
      type: object
      properties:
        int32_array_values:
          type: object
          properties:
            ints:
              type: array
              items:
                $ref: '#/components/schemas/int32'
          required:
            - ints
          additionalProperties: false
      required:
        - int32_array_values
      additionalProperties: false
    apply_int32_array:
      title: INT32_ARRAY specialism
      description: Applies INT32_ARRAY values, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: INT32_ARRAY
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/int32_array_values'
          constraint:
            oneOf:
              - $ref: '#/components/schemas/int32_constraint'
              - $ref: '#/components/schemas/constraint_ref'
          precision: false
          max_length: false
          total_length: false
    float32_array_values:
      title: FLOAT32_ARRAY Value
      description: Defines FLOAT32_ARRAY as an array of FLOAT32 values
      type: object
      properties:
        float32_array_values:
          type: object
          properties:
            floats:
              type: array
              items:
                $ref: '#/components/schemas/float32'
          required:
            - floats
          additionalProperties: false
      required:
        - float32_array_values
      additionalProperties: false
    apply_float32_array:
      title: FLOAT32_ARRAY specialism
      description: Applies FLOAT32_ARRAY values, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: FLOAT32_ARRAY
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/float32_array_values'
          constraint:
            oneOf:
              - $ref: '#/components/schemas/float32_constraint'
              - $ref: '#/components/schemas/constraint_ref'
          max_length: false
          total_length: false
    string_array_values:
      title: STRING_ARRAY Value
      description: Defines STRING_ARRAY as an array of STRING values
      type: object
      properties:
        string_array_values:
          type: object
          properties:
            strings:
              type: array
              items:
                type: string
          required:
            - strings
          additionalProperties: false
      required:
        - string_array_values
      additionalProperties: false
    apply_string_array:
      title: STRING_ARRAY specialism
      description: Applies STRING_ARRAY values, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: STRING_ARRAY
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/string_array_values'
          constraint:
            oneOf:
              - $ref: '#/components/schemas/string_constraint'
              - $ref: '#/components/schemas/constraint_ref'
          precision: false
    struct_array_values:
      title: STRUCT_ARRAY Value
      description: Defines STRUCT_ARRAY as an array of STRUCT values
      type: object
      properties:
        struct_array_values:
          type: object
          properties:
            struct_values:
              type: array
              items:
                $ref: '#/components/schemas/struct_value'
          required:
            - struct_values
          additionalProperties: false
      required:
        - struct_array_values
      additionalProperties: false
    apply_struct_array:
      title: STRUCT_ARRAY specialism
      description: Applies STRUCT_ARRAY values, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: STRUCT_ARRAY
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/struct_array_values'
          constraint: false
          precision: false
          max_length: false
          total_length: false
    struct_variant_array_values:
      title: STRUCT_VARIANT_ARRAY Value
      description: Defines STRUCT_VARIANT_ARRAY as an array of STRUCT_VARIANT values
      type: object
      properties:
        struct_variant_array_values:
          type: object
          properties:
            struct_variant_values:
              type: array
              items:
                $ref: '#/components/schemas/struct_variant_value'
          required:
            - struct_variant_values
          additionalProperties: false
      required:
        - struct_variant_array_values
      additionalProperties: false
    apply_struct_variant_array:
      title: STRUCT_VARIANT_ARRAY specialism
      description: Applies STRUCT_VARIANT_ARRAY values, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: STRUCT_VARIANT_ARRAY
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/struct_variant_array_values'
          constraint: false
          precision: false
          max_length: false
          total_length: false
    data_payload:
      title: DATA Payload
      description: |
        How data is sent to the client.
      type: object
      properties:
        payload:
          oneOf:
            - type: string
              format: uri
              description: The URL of the data payload
            - type: string
              contentEncoding: base64
              contentMediaType: application/octet-stream
              description: The base64-encoded binary payload
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
        payload_encoding:
          type: string
          enum:
            - UNCOMPRESSED
            - GZIP
            - DEFLATE
          default: UNCOMPRESSED
        digest:
          type: string
          contentMediaType: application/octet-stream
          contentEncoding: base64
          description: The SHA-256 digest of the payload
        metadata:
          type: object
          additionalProperties:
            type: string
          description: key/value pairs about the payload, e.g. mime-type, etc.
      required:
        - payload
      additionalProperties: false
    data_value:
      title: DATA Value
      description: Defines DATA either a URL or a binary payload
      type: object
      properties:
        data_payload:
          $ref: '#/components/schemas/data_payload'
      required:
        - data_payload
    apply_data:
      title: DATA specialism
      description: Applies DATA values, disables properties that don't work with this type
      if:
        type: object
        properties:
          type:
            const: DATA
      then:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/data_value'
          constraint: false
          precision: false
          max_length: false
          total_length: false
    param_type:
      title: Parameter's data type
      description: The parameter's data type
      type: string
      enum:
        - UNDEFINED
        - EMPTY
        - INT32
        - FLOAT32
        - STRING
        - STRUCT
        - STRUCT_VARIANT
        - INT32_ARRAY
        - FLOAT32_ARRAY
        - STRING_ARRAY
        - BINARY
        - STRUCT_ARRAY
        - STRUCT_VARIANT_ARRAY
        - DATA
      default: UNDEFINED
    param:
      title: Schema for Catena's Param object
      description: |
        Defines the parameter's type, constraints on its value, UI hints, access control
        and other properties.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/polyglot_text'
        type:
          $ref: '#/components/schemas/param_type'
        value:
          $ref: '#/components/schemas/value'
        constraint:
          oneOf:
            - $ref: '#/components/schemas/constraint_ref'
            - $ref: '#/components/schemas/constraint'
        params:
          $ref: '#/components/schemas/param_map'
        commands:
          $ref: '#/components/schemas/param_map'
        template_oid:
          $ref: '#/components/schemas/template_oid'
        read_only:
          $ref: '#/components/schemas/read_only'
        precision:
          $ref: '#/components/schemas/precision'
        max_length:
          $ref: '#/components/schemas/max_length'
        total_length:
          $ref: '#/components/schemas/total_length'
        widget:
          $ref: '#/components/schemas/widget'
        access_scope:
          $ref: '#/components/schemas/access_scope'
        client_hints:
          $ref: '#/components/schemas/client_hints'
        response:
          $ref: '#/components/schemas/response'
        minimal_set:
          $ref: '#/components/schemas/minimal_set'
        help:
          $ref: '#/components/schemas/polyglot_text'
        import:
          $ref: '#/components/schemas/import'
        oid_aliases:
          $ref: '#/components/schemas/oid_aliases'
        stateless:
          $ref: '#/components/schemas/stateless'
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/apply_int32'
        - $ref: '#/components/schemas/apply_float32'
        - $ref: '#/components/schemas/apply_string'
        - $ref: '#/components/schemas/apply_struct'
        - $ref: '#/components/schemas/apply_struct_variant'
        - $ref: '#/components/schemas/apply_int32_array'
        - $ref: '#/components/schemas/apply_float32_array'
        - $ref: '#/components/schemas/apply_string_array'
        - $ref: '#/components/schemas/apply_struct_array'
        - $ref: '#/components/schemas/apply_struct_variant_array'
        - $ref: '#/components/schemas/apply_data'
    param_map:
      title: Parameters Map
      description: |
        A map of simple_oids to parameter descriptors.
        The keys are the names of the parameters.
      type: object
      patternProperties:
        ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
          $ref: '#/components/schemas/param'
      minProperties: 1
      additionalProperties: false
    template_oid:
      title: Template OID
      description: The fully qualified OID of the template that this parameter is based on.
      type: string
      format: json-pointer
      default: ''
    read_only:
      title: Read Only flag
      description: If true, the parameter is read-only
      type: boolean
      default: false
    precision:
      title: Precision
      description: The number of decimal places to display for floating point values
      type: integer
      default: 0
      minimum: 0
      maximum: 10
    max_length:
      title: Maximum String Length
      description: "The maximum length of a string value, \nor the maximum length of an element in a string array\n"
      type: integer
      default: 0
      minimum: 0
    total_length:
      title: Total String Array Size
      description: The total length of a string array value
      type: integer
      default: 0
      minimum: 0
    widget:
      title: UI Widget
      description: Recommended UI widget to use for the parameter
      type: string
    access_scope:
      title: Access Scope
      description: |
        The parameter's access scope. If not present, the parameter's parent's
        access scope is used unless the parameter is a top-level one, in which
        case the device's default access scope is used.
      type: string
      enum:
        - st2138:mon
        - st2138:op
        - st2138:cfg
        - st2138:adm
    response:
      title: Response
      description: |
        Flag to indicate whether the parent command object produces a response.
      type: boolean
      default: false
    minimal_set:
      title: Minimal Set Flag
      description: |
        When true, indicates that the parameter is part of the minimal set of
        parameters that should be reported by the device.
      type: boolean
      default: false
    import:
      title: Import Directive
      description: |
        Provides the ability to build device models from multiple files.
        If a URL is provided, the import will be attempted from there.
        Otherwise a local file path can be provided.
      oneOf:
        - type: object
          properties:
            url:
              type: string
              format: uri
              description: The URL of the import file.
            digest:
              type: string
              contentMediaType: application/octet-stream
              contentEncoding: base64
              description: The SHA-256 digest of the import file.
          required:
            - url
          additionalProperties: false
        - type: object
          properties:
            file:
              type: string
              description: Local path to the import file.
            digest:
              type: string
              contentMediaType: application/octet-stream
              contentEncoding: base64
              description: The SHA-256 digest of the import file.
          required:
            - file
          additionalProperties: false
    oid_aliases:
      title: OID Aliases
      description: |
        Additional Object IDs that this parameter has had.
        This allows a client to locate a parameter that may previously have been
        known by another Object ID
      type: array
      items:
        type: string
    stateless:
      title: Stateless Flag
      description: |
        When true, indicates that the parameter is stateless and should not be
        persisted. Examples: time of day, audio meter, etc.
      type: boolean
      default: false
    device:
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Schema for Catena's Device Model
      description: |
        Intended to assist humans to author Catena device models as JSON files as
        some IDEs can use schemata such as this one to lint models.
      type: object
      properties:
        params:
          $ref: '#/components/schemas/param_map'
        commands:
          $ref: '#/components/schemas/param_map'
        access_scopes:
          $ref: '#/components/schemas/access_scopes'
        default_scope:
          $ref: '#/components/schemas/default_scope'
        slot:
          $ref: '#/components/schemas/slot'
        detail_level:
          $ref: '#/components/schemas/detail_level'
        multi_set_enabled:
          $ref: '#/components/schemas/multi_set_enabled'
        subscriptions:
          $ref: '#/components/schemas/subscriptions'
        constraints:
          $ref: '#/components/schemas/constraint_map'
        language_packs:
          $ref: '#/components/schemas/language_packs'
        menu_groups:
          $ref: '#/components/schemas/menu_groups'
      additionalProperties: false
    component_param:
      title: Component Param
      description: |
        A top-level parameter descriptor plus its oid.
        type: object
      properties:
        oid:
          $ref: '#/components/schemas/simple_oid'
        param:
          $ref: '#/components/schemas/param'
        required:
          - oid
          - param
        additionalProperties: false
    component_command:
      title: Component Command
      description: |
        A command descriptor plus its oid.
      type: object
      properties:
        oid:
          $ref: '#/components/schemas/simple_oid'
        command:
          $ref: '#/components/schemas/param'
        required:
          - oid
          - command
        additionalProperties: false
    fqoid:
      title: Fully Qualified OID
      description: |
        A fully qualified OID is used as a key in a map of string keys to values.
        It is a simple OID with a leading slash. It's a "headless" json-pointer
        with simple OIDs as the segments.
      type: string
      pattern: ^([a-zA-Z]\w{0,30})(/([a-zA-Z]\w{0,30})){0,30}$
      default: ''
    component_menu:
      title: Component Menu
      description: |
        A menudescriptor plus its fqoid.
      type: object
      properties:
        oid:
          $ref: '#/components/schemas/fqoid'
        menu:
          $ref: '#/components/schemas/menu'
        required:
          - oid
          - menu
        additionalProperties: false
    component_constraint:
      title: Component Constraint
      description: |
        A constraint descriptor plus its oid.
      type: object
      properties:
        oid:
          $ref: '#/components/schemas/simple_oid'
        constraint:
          $ref: '#/components/schemas/constraint'
        required:
          - oid
          - constraint
        additionalProperties: false
    component_language_pack:
      title: Component Language Pack
      description: |
        A language pack plus its oid.
      type: object
      properties:
        language:
          type: string
          maxLength: 32
        language_pack:
          $ref: '#/components/schemas/language_pack'
        required:
          - language
          - language_pack
        additionalProperties: false
    empty:
      title: Empty
      description: |
        An empty response to a command.
      type: object
      additionalProperties: false
    exception:
      title: Exception
      description: |
        One possible response to a command.
      type: object
      properties:
        type:
          type: string
        error_message:
          $ref: '#/components/schemas/polyglot_text'
        details:
          type: string
    access_scopes:
      title: Access Scopes
      description: |
        The access scopes recognized by this the device.
      type: array
      items:
        type: string
        enum:
          - st2138:mon
          - st2138:mon:w
          - st2138:op
          - st2138:op:w
          - st2138:cfg
          - st2138:cfg:w
          - st2138:adm
          - st2138:adm:w
    default_scope:
      title: Default Scope
      description: |
        The default scope for the device.
        Objects in the model will have this access scope unless overridden
        explicitly, or implicitly by inheritance
      type: string
      default: ''
    multi_set_enabled:
      title: Multi Set Enabled Flag
      description: |
        If true, the device supports multi-set operations. These are idempotent
        operations that can be used to set multiple parameters in a single
        operation.
      type: boolean
      default: false
    subscriptions:
      title: Subscriptions
      description: "When true, indicates that the device supports subscription-based \naccess to subsets of parameters.\n"
      type: boolean
      default: false
    constraint_map:
      title: Constraint Map
      description: |
        A map of top-level shared constraints
      type: object
      patternProperties:
        ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
          $ref: '#/components/schemas/constraint'
      additionalProperties: false
    language_packs:
      title: Language Packs
      description: "Language Packs A map of language identifiers to resource dictionaries\nor language packs for each language supported. The keys are \nfrom the ISO 639-1 language code, e.g. \n\\\"es\\\" for Global Spanish.\n\\\"es-CO\\\" for Colombian Spanish.\n\\\"pl\\\" for Jezyk polski\"\n"
      type: object
      properties:
        packs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/language_pack'
    menu_groups:
      title: Menu Groups
      description: |
        A map of menu groups.
      type: object
      patternProperties:
        ^[a-zA-Z][a-zA-Z0-9_]{0,31}$:
          $ref: '#/components/schemas/menu_group'
    command_response:
      title: Command Response
      description: |
        Possible responses to a command.
      type: object
      oneOf:
        - type: object
          properties:
            no_response:
              $ref: '#/components/schemas/empty'
          required:
            - no_response
          additionalProperties: false
        - type: object
          properties:
            response:
              $ref: '#/components/schemas/value'
          required:
            - response
          additionalProperties: false
        - type: object
          properties:
            exception:
              $ref: '#/components/schemas/exception'
          required:
            - exception
          additionalProperties: false
    external_object_payload:
      title: External Object Payload
      description: |
        How assets/external objects are sent to the client.
      type: object
      properties:
        cachable:
          type: boolean
          default: false
        payload:
          $ref: '#/components/schemas/data_payload'
      required:
        - payload
      additionalProperties: false
    param_info:
      title: Param Info
      description: |
        Information about a parameter - it's id and descriptor.
      type: object
      properties:
        oid:
          $ref: '#/components/schemas/fqoid'
        param:
          $ref: '#/components/schemas/param'
      required:
        - oid
        - param
      additionalProperties: false
    help:
      title: Help
      description: |
        Help text or tool tip for the parameter.
      $ref: '#/components/schemas/polyglot_text'
      default: ''
    device_component:
      title: Device Component
      description: |
        The device model can be broken into smaller components: parameters,
        commands, menus, etc. The entire device model can be sent as a single
        component.
      type: object
      oneOf:
        - $ref: '#/components/schemas/device'
        - $ref: '#/components/schemas/component_param'
        - $ref: '#/components/schemas/component_command'
        - $ref: '#/components/schemas/component_menu'
        - $ref: '#/components/schemas/component_constraint'
        - $ref: '#/components/schemas/component_language_pack'
    external_object_request_payload:
      title: External Object Request Payload
      description: |
        Information needed to identify the requested asset/external object.
      type: object
      properties:
        slot:
          $ref: '#/components/schemas/slot'
        oid:
          $ref: '#/components/schemas/fqoid'
      required:
        - slot
        - oid
      additionalProperties: false
